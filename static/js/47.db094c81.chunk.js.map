{"version":3,"sources":["styles/layout.ts","styles/interactive.ts","utils/apiClient.ts","components/user/Signup.tsx"],"names":["useLayoutStyles","makeStyles","theme","header","fontWeight","content","marginTop","spacing","marginBottom","marginLeft","marginRight","alert","margin","bold","typography","fontWeightBold","avatarProfile","breakpoints","down","height","width","up","capitalize","textTransform","useInteractiveStyles","container","padding","caption","textAlign","sliderContainer","paddingRight","inputHidden","display","noDecoration","textDecoration","color","palette","text","primary","useStrapi","token","axios","useMemo","Axios","create","baseURL","process","interceptors","request","use","req","headers","authorization","response","res","err","data","message","id","messages","postLoginLocal","useCallback","values","a","post","postRegisterLocal","getRedirectConnectLoginUrl","service","getUri","url","getConnectCallback","provider","searchString","get","getUserMe","postUpload","formData","Object","assign","putUserMetadataMe","userMetaId","put","postForgotPassword","email","postResetPassword","code","password","passwordConfirmation","getSekaiProfileMe","postSekaiProfileVerify","userid","postSekaiProfileConfirm","putSekaiProfileUpdate","getLanguages","getUserMetadataMe","getSekaiCurrentEvent","getSekaiProfileEventRecordMe","eventId","params","postSekaiProfileEventRecord","getAnnouncements","_sort","getAnnouncementById","getAnnouncementPage","limit","page","_limit","_start","getAnnouncementCount","Number","getComments","contentType","postComment","userId","authorUser","related","refId","ref","field","getUserInfo","patchCommentLike","contentId","commentId","patch","postCommentAbuse","reason","Signup","layoutClasses","interactiveClasses","t","useTranslation","jwtAuth","useJwtAuth","history","useHistory","useState","passwordScore","setPasswordScore","langs","setLangs","useEffect","document","title","then","handleValidate","errors","username","length","confirmPassword","test","variant","className","maxWidth","initialValues","languages","validate","onSubmit","setErrors","user","push","localStorage","setItem","String","Date","getTime","submitForm","isSubmitting","dirty","isValid","justify","item","component","TextField","name","type","label","InputProps","startAdornment","position","minLength","onChangeScore","score","scoreWords","shortScoreWord","shrink","htmlFor","Select","multiple","inputProps","style","filter","lang","enabled","map","value","key","to","alignItems","disabled","onClick","size"],"mappings":"8KAEMA,EAAkBC,aAAW,SAACC,GAAD,YAAY,CAC7CC,OAAQ,CACNC,WAAY,QAEdC,QAAS,CACPC,UAAWJ,EAAMK,QAAQ,GACzBC,aAAcN,EAAMK,QAAQ,GAC5BE,WAAY,OACZC,YAAa,QAEfC,MAAO,CACLC,OAAQV,EAAMK,QAAQ,EAAG,IAE3BM,KAAM,CACJT,WAAYF,EAAMY,WAAWC,gBAE/BC,eAAa,mBACVd,EAAMe,YAAYC,KAAK,MAAQ,CAC9BC,OAAQjB,EAAMK,QAAQ,IACtBa,MAAOlB,EAAMK,QAAQ,MAHZ,cAKVL,EAAMe,YAAYI,GAAG,MAAQ,CAC5BF,OAAQjB,EAAMK,QAAQ,IACtBa,MAAOlB,EAAMK,QAAQ,MAPZ,GAUbe,WAAY,CACVC,cAAe,mB,0FC3BbC,EAAuBvB,aAAW,SAACC,GAAD,MAAY,CAClDuB,UAAW,CACTb,OAAQV,EAAMK,QAAQ,EAAG,GACzBmB,QAASxB,EAAMK,QAAQ,EAAG,IAE5BoB,QAAQ,eACLzB,EAAMe,YAAYI,GAAG,MAAQ,CAC5BO,UAAW,UAGfC,gBAAgB,eACb3B,EAAMe,YAAYI,GAAG,MAAQ,CAC5BS,aAAc5B,EAAMK,QAAQ,KAGhCwB,YAAa,CACXC,QAAS,QAEXC,aAAc,CACZC,eAAgB,OAChB,UAAW,CACTA,eAAgB,aAElBC,MAAOjC,EAAMkC,QAAQC,KAAKC,c,0HCLvB,SAASC,EAAUC,GACxB,IAAMC,EAAQC,mBAAQ,WACpB,IAAMD,EAAQE,IAAMC,OAAO,CACzBC,QAASC,8BAkBX,OAfAL,EAAMM,aAAaC,QAAQC,KAAI,SAACC,GAE9B,OADAV,IAAUU,EAAIC,QAAQC,cAAZ,iBAAsCZ,IACzCU,KAGTT,EAAMM,aAAaM,SAASJ,KAC1B,SAACK,GAAD,OAASA,KACT,SAACC,GAIC,MAHIA,EAAIF,SAASG,KAAKC,QACpBF,EAAIG,GAAKH,EAAIF,SAASG,KAAKC,QAAQ,GAAGE,SAAS,GAAGD,GAC/CH,EAAIG,GAAKH,EAAIE,QACZF,KAIHd,IACN,CAACD,IAEJ,MAAO,CACLoB,eAAgBC,sBAAW,uCACzB,WAAOC,GAAP,SAAAC,EAAA,sEACStB,EAAMuB,KAA0B,cAAeF,GADxD,uCACiEN,MADjE,2CADyB,sDAGzB,CAACf,IAEHwB,kBAAmBJ,sBAAW,uCAC5B,WAAOC,GAAP,SAAAC,EAAA,sEACStB,EAAMuB,KAA0B,uBAAwBF,GADjE,uCAEKN,MAFL,2CAD4B,sDAI5B,CAACf,IAEHyB,2BAA4BL,uBAC1B,SAACM,GAAD,gBACK1B,EAAM2B,OAAO,CACdC,IAAI,GAAD,OAAKvB,4BAAL,oBAAkDqB,QAEzD,CAAC1B,IAEH6B,mBAAoBT,sBAAW,uCAC7B,WACEU,EACAC,GAFF,SAAAT,EAAA,sEAKUtB,EAAMgC,IAAN,gBACKF,EADL,oBACyBC,IANnC,uCAQIhB,MARJ,2CAD6B,wDAU7B,CAACf,IAEHiC,UAAWb,sBAAW,uCACpB,WAAOrB,GAAP,SAAAuB,EAAA,sEAEUtB,EAAMgC,IACV,YACAjC,EACI,CACEW,QAAS,CAAEC,cAAc,UAAD,OAAYZ,KAEtC,IARV,uCAUIgB,MAVJ,2CADoB,sDAYpB,CAACf,IAEHkC,WAAYd,sBAAW,uCACrB,WAAOe,EAAoBpC,GAA3B,SAAAuB,EAAA,sEAEUtB,EAAMuB,KAAK,UAAWY,EAAU,CACpCzB,QAAS0B,OAAOC,OACd,CACE,eAAgB,uBAElBtC,EACI,CACEY,cAAc,UAAD,OAAYZ,IAE3B,MAXZ,uCAcIgB,MAdJ,2CADqB,wDAgBrB,CAACf,IAEHsC,kBAAmBlB,sBAAW,uCAC5B,WACEmB,EACAxB,GAFF,SAAAO,EAAA,sEAIStB,EAAMwC,IAAwB,oBAAqBzB,GAJ5D,uCAImEA,MAJnE,2CAD4B,wDAM5B,CAACf,IAEHyC,mBAAoBrB,sBAAW,uCAC7B,WAAOsB,GAAP,SAAApB,EAAA,sEAEUtB,EAAMuB,KAAN,wBAAoC,CACxCmB,UAHN,uCAKI3B,MALJ,2CAD6B,sDAO7B,CAACf,IAEH2C,kBAAmBvB,sBAAW,uCAC5B,WAAOwB,EAAcC,EAAkBC,GAAvC,SAAAxB,EAAA,sEAEUtB,EAAMuB,KAAN,uBAAmC,CACvCqB,OACAC,WACAC,yBALN,uCAOI/B,MAPJ,2CAD4B,0DAS5B,CAACf,IAEH+C,kBAAmB3B,sBAAW,uCAC5B,WAAOrB,GAAP,SAAAuB,EAAA,sEAEUtB,EAAMgC,IACV,qBACAjC,EACI,CACEW,QAAS,CAAEC,cAAc,UAAD,OAAYZ,KAEtC,IARV,uCAUIgB,MAVJ,2CAD4B,sDAY5B,CAACf,IAEHgD,uBAAwB5B,sBAAW,uCACjC,WACE6B,GADF,SAAA3B,EAAA,sEAOUtB,EAAMuB,KAGT,yBAA0B,CAC3B0B,WAXN,uCAaIlC,MAbJ,2CADiC,sDAejC,CAACf,IAEHkD,wBAAyB9B,sBAAW,uCAClC,WAAOH,EAAYgC,GAAnB,SAAA3B,EAAA,sEAEUtB,EAAMuB,KAAN,0BACeN,EADf,YAEJ,CACEgC,WALR,uCAQIlC,MARJ,2CADkC,wDAUlC,CAACf,IAEHmD,sBAAuB/B,sBAAW,uCAChC,WAAOH,GAAP,SAAAK,EAAA,sEAEUtB,EAAMwC,IAAN,0BACevB,EADf,YAFV,uCAKIF,MALJ,2CADgC,sDAOhC,CAACf,IAEHoD,aAAchC,sBAAW,sBACvB,sBAAAE,EAAA,sEACStB,EAAMgC,IAAqB,cADpC,uCACmDjB,MADnD,2CAEA,CAACf,IAEHqD,kBAAmBjC,sBAAW,uCAC5B,WAAOrB,GAAP,SAAAuB,EAAA,sEAEUtB,EAAMgC,IACV,oBACAjC,EACI,CACEW,QAAS,CAAEC,cAAc,UAAD,OAAYZ,KAEtC,IARV,uCAUIgB,MAVJ,2CAD4B,sDAY5B,CAACf,IAEHsD,qBAAsBlC,sBAAW,sBAC/B,sBAAAE,EAAA,sEACStB,EAAMgC,IAA4B,wBAD3C,uCACoEjB,MADpE,2CAEA,CAACf,IAEHuD,6BAA8BnC,sBAAW,uCACvC,WAAOoC,GAAP,SAAAlC,EAAA,sEAEUtB,EAAMgC,IACV,kCACA,CACEyB,OAAQD,EACJ,CACEA,WAEF,KATZ,uCAYIzC,MAZJ,2CADuC,sDAcvC,CAACf,IAEH0D,4BAA6BtC,sBAAW,uCACtC,WAAOoC,GAAP,SAAAlC,EAAA,sEACStB,EAAMuB,KAAK,sCAAuC,CAAEiC,YAD7D,uCAEKzC,MAFL,2CADsC,sDAItC,CAACf,IAEH2D,iBAAkBvC,sBAAW,sBAC3B,sBAAAE,EAAA,sEAEUtB,EAAMgC,IAAyB,kBAAmB,CACtDyB,OAAQ,CACNG,MAAO,gBAJf,uCAOI7C,MAPJ,2CAQA,CAACf,IAEH6D,oBAAqBzC,sBAAW,uCAC9B,WAAOH,GAAP,SAAAK,EAAA,sEACStB,EAAMgC,IAAN,yBAA+Cf,IADxD,uCAC+DF,MAD/D,2CAD8B,sDAG9B,CAACf,IAEH8D,oBAAqB1C,sBAAW,sBAC9B,0CAAAE,EAAA,6DAAOyC,EAAP,+BAAuB,GAAIC,EAA3B,+BAA0C,EAA1C,SAEUhE,EAAMgC,IAAyB,iBAAkB,CACrDyB,OAAQ,CACNQ,OAAQF,EACRG,OAAQF,EAAOD,EACfH,MAAO,gBANf,uCASI7C,MATJ,2CAUA,CAACf,IAEHmE,qBAAsB/C,sBAAW,sBAC/B,sBAAAE,EAAA,kEAAY8C,OAAZ,SAA0BpE,EAAMgC,IAAI,wBAApC,0BAA6DjB,KAA7D,6EACA,CAACf,IAEHqE,YAAajD,sBAAW,uCACtB,WAAOkD,EAAqBrD,GAA5B,SAAAK,EAAA,sEACStB,EAAMgC,IAAN,oBAAuBsC,EAAvB,YAAsCrD,IAD/C,uCACsDF,MADtD,2CADsB,wDAGtB,CAACf,IAEHuE,YAAanD,sBAAW,uCACtB,WACEkD,EACArD,EACAuD,EACA5G,GAJF,SAAA0D,EAAA,sEAOUtB,EAAMuB,KAAN,oBAAwB+C,EAAxB,YAAuCrD,GAAM,CACjDwD,WAAYD,EACZ5G,UACA8G,QAAS,CACP,CACEC,MAAO1D,EACP2D,IAAKN,EACLO,MAAO,eAdjB,uCAkBI9D,MAlBJ,2CADsB,4DAoBtB,CAACf,IAEH8E,YAAa1D,sBAAW,uCACtB,WAAOH,GAAP,SAAAK,EAAA,sEACStB,EAAMgC,IAAN,iBAA+Bf,IADxC,uCAC+CF,MAD/C,2CADsB,sDAGtB,CAACf,IAEH+E,iBAAkB3D,sBAAW,uCAC3B,WACEkD,EACAU,EACAC,GAHF,SAAA3D,EAAA,sEAMUtB,EAAMkF,MAAN,oBACSZ,EADT,YACwBU,EADxB,oBAC6CC,EAD7C,UANV,uCASIlE,MATJ,2CAD2B,0DAW3B,CAACf,IAEHmF,iBAAkB/D,sBAAW,uCAC3B,WACEkD,EACAU,EACAC,EACAG,EACAxH,GALF,SAAA0D,EAAA,sEAQUtB,EAAMuB,KAAN,oBACS+C,EADT,YACwBU,EADxB,oBAC6CC,EAD7C,iBAEJ,CACEG,SACAxH,YAZR,uCAeImD,MAfJ,2CAD2B,8DAiB3B,CAACf,O,6TCxEQqF,UAtOc,WAC3B,IAAMC,EAAgB/H,cAChBgI,EAAqBxG,cACnByG,EAAMC,cAAND,EACFE,EAAUC,cACVC,EAAUC,cALiB,EAMW/F,cAApC0B,EANyB,EAMzBA,kBAAmB4B,EANM,EAMNA,aANM,EAQS0C,mBAAS,GARlB,mBAQ1BC,EAR0B,KAQXC,EARW,OASPF,mBAA0B,IATnB,mBAS1BG,EAT0B,KASnBC,EATmB,KAWjCC,qBAAU,WACRC,SAASC,MAAQb,EAAE,kBAClB,CAACA,IAEJW,qBAAU,WACR/C,IAAekD,MAAK,SAACvF,GAAD,OAAUmF,EAASnF,QACtC,CAACqC,IAEJ,IAAMmD,EAAiBnF,uBACrB,SAACC,GACC,IAAMmF,EAAkC,GAuBxC,OAtBKnF,EAAOoF,WACVD,EAAOC,SAAWjB,EAAE,wBAEjBnE,EAAOwB,SAEDxB,EAAOwB,SAAS6D,OAAS,EAClCF,EAAO3D,SAAW2C,EAAE,+BACXO,EAAgB,IACzBS,EAAO3D,SAAW2C,EAAE,gCAJpBgB,EAAO3D,SAAW2C,EAAE,uBAMjBnE,EAAOsF,gBAEDtF,EAAOsF,kBAAoBtF,EAAOwB,WAC3C2D,EAAOG,gBAAkBnB,EAAE,uCAF3BgB,EAAOG,gBAAkBnB,EAAE,uBAIxBnE,EAAOqB,MAGT,4CAA4CkE,KAAKvF,EAAOqB,SAEzD8D,EAAO9D,MAAQ8C,EAAE,4BAJjBgB,EAAO9D,MAAQ8C,EAAE,uBAMZgB,IAET,CAACT,EAAeP,IAGlB,OACE,kBAAC,WAAD,KACE,kBAAC,IAAD,CAAYqB,QAAQ,KAAKC,UAAWxB,EAAc5H,QAC/C8H,EAAE,kBAEL,kBAAC,IAAD,CAAWsB,UAAWxB,EAAc1H,QAASmJ,SAAS,MACpD,kBAAC,IAAD,CACEC,cAAe,CACbP,SAAU,GACV/D,MAAO,GACPG,SAAU,GACV8D,gBAAiB,GACjBM,UAAW,IAEbC,SAAUX,EACVY,SAAQ,uCAAE,WAAO9F,EAAP,oBAAAC,EAAA,6DAAiB8F,EAAjB,EAAiBA,UAAjB,kBAEa5F,EAAkBH,GAF/B,OAEAN,EAFA,OAIN2E,EAAQ2B,KAAOtG,EAAKsG,KAEpBzB,EAAQ0B,KAAK,sBAEbC,aAAaC,QACX,gBACAC,QAAO,IAAIC,MAAOC,YAVd,kDAcW,gCAAb,KAAM1G,GACRmG,EAAU,CACR1E,MAAO8C,EAAE,4BAES,mCAAb,KAAMvE,IACbmG,EAAU,CACRX,SAAUjB,EAAE,8BApBV,0DAAF,0DAyBP,gBAAGoC,EAAH,EAAGA,WAAYC,EAAf,EAAeA,aAAcC,EAA7B,EAA6BA,MAAOC,EAApC,EAAoCA,QAAS1G,EAA7C,EAA6CA,OAA7C,OACC,kBAAC,IAAD,CAAMrC,WAAS,EAACgJ,QAAQ,UACtB,kBAAC,IAAD,CAAMC,MAAI,GACR,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEC,UAAWC,IACXC,KAAK,WACLC,KAAK,OACLC,MAAO9C,EAAE,8BACT+C,WAAY,CACVC,eACE,kBAAC,IAAD,CAAgBC,SAAS,SACvB,kBAAC,IAAD,UAKR,6BACA,6BACA,kBAAC,IAAD,CACEP,UAAWC,IACXC,KAAK,QACLC,KAAK,QACLC,MAAO9C,EAAE,2BACT+C,WAAY,CACVC,eACE,kBAAC,IAAD,CAAgBC,SAAS,SACvB,kBAAC,IAAD,UAKR,6BACA,6BACA,kBAAC,IAAD,CACEP,UAAWC,IACXC,KAAK,WACLC,KAAK,WACLC,MAAO9C,EAAE,8BACT+C,WAAY,CACVC,eACE,kBAAC,IAAD,CAAgBC,SAAS,SACvB,kBAAC,IAAD,UAKR,6BACA,kBAAC,IAAD,CACE5F,SAAUxB,EAAOwB,SACjB6F,UAAW,EACXC,cAAe,SAACC,GAAD,OAAW5C,EAAiB4C,IAC3CC,WAAY,CACVrD,EAAE,0BACFA,EAAE,sBACFA,EAAE,sBACFA,EAAE,sBACFA,EAAE,yBAEJsD,eAAgBtD,EAAE,6BAEpB,6BACA,kBAAC,IAAD,CACE0C,UAAWC,IACXC,KAAK,kBACLC,KAAK,WACLC,MAAO9C,EAAE,sCACT+C,WAAY,CACVC,eACE,kBAAC,IAAD,CAAgBC,SAAS,SACvB,kBAAC,IAAD,UAKR,6BACA,6BACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAYM,QAAM,EAACC,QAAQ,mBACxBxD,EAAE,mCAEL,kBAAC,IAAD,CACE0C,UAAWe,IACXZ,KAAK,OACLa,UAAU,EACVd,KAAK,YACLe,WAAY,CACVf,KAAM,YACNnH,GAAI,mBAENmI,MAAO,CAAEzK,MAAO,MAEfsH,EACEoD,QAAO,SAACC,GAAD,OAAUA,EAAKC,WACtBC,KAAI,SAACF,GAAD,OACH,kBAAC,IAAD,CAAUG,MAAOH,EAAKrI,GAAIyI,IAAG,eAAUJ,EAAK1G,OACzC0G,EAAKlB,WAKhB,6BACA,6BACA,kBAAC,IAAD,CACEuB,GAAG,cACH7C,UAAWvB,EAAmB/F,cAE9B,kBAAC,IAAD,CAAYqH,QAAQ,UAAUnH,MAAM,eACjC8F,EAAE,+BAGP,6BACA,6BACA,2BAAO6C,KAAK,SAASe,MAAO,CAAE7J,QAAS,UACvC,kBAAC,IAAD,CAAMP,WAAS,EAAC4K,WAAW,SAAS9L,QAAS,GAC3C,kBAAC,IAAD,CAAMmK,MAAI,GACR,kBAAC,IAAD,CACEpB,QAAQ,YACRnH,MAAM,UACNmK,SAAUhC,IAAiBC,IAAUC,EACrC+B,QAASlC,GAERpC,EAAE,4BAA6B,MAGnCqC,GACC,kBAAC,IAAD,CAAMI,MAAI,GACR,kBAAC,IAAD,CAAkB8B,KAAM","file":"static/js/47.db094c81.chunk.js","sourcesContent":["import { makeStyles } from \"@material-ui/core\";\n\nconst useLayoutStyles = makeStyles((theme) => ({\n  header: {\n    fontWeight: \"bold\",\n  },\n  content: {\n    marginTop: theme.spacing(3),\n    marginBottom: theme.spacing(3),\n    marginLeft: \"auto\",\n    marginRight: \"auto\",\n  },\n  alert: {\n    margin: theme.spacing(1, 0),\n  },\n  bold: {\n    fontWeight: theme.typography.fontWeightBold,\n  },\n  avatarProfile: {\n    [theme.breakpoints.down(\"sm\")]: {\n      height: theme.spacing(10),\n      width: theme.spacing(10),\n    },\n    [theme.breakpoints.up(\"md\")]: {\n      height: theme.spacing(20),\n      width: theme.spacing(20),\n    },\n  },\n  capitalize: {\n    textTransform: \"capitalize\",\n  },\n}));\n\nexport { useLayoutStyles };\n","import { makeStyles } from \"@material-ui/core\";\n\nconst useInteractiveStyles = makeStyles((theme) => ({\n  container: {\n    margin: theme.spacing(1, 0),\n    padding: theme.spacing(1, 2),\n  },\n  caption: {\n    [theme.breakpoints.up(\"md\")]: {\n      textAlign: \"right\",\n    },\n  },\n  sliderContainer: {\n    [theme.breakpoints.up(\"md\")]: {\n      paddingRight: theme.spacing(5),\n    },\n  },\n  inputHidden: {\n    display: \"none\",\n  },\n  noDecoration: {\n    textDecoration: \"none\",\n    \"&:hover\": {\n      textDecoration: \"underline\",\n    },\n    color: theme.palette.text.primary,\n  },\n}));\n\nexport { useInteractiveStyles };\n","import { CommentAbuseReason, CommentModel } from \"./../strapi-model.d\";\nimport Axios from \"axios\";\nimport { useCallback, useMemo } from \"react\";\nimport {\n  AnnouncementModel,\n  LanguageModel,\n  LoginLocalApiReturn,\n  LoginValues,\n  RegisterValues,\n  SekaiCurrentEventModel,\n  SekaiProfileEventRecordModel,\n  SekaiProfileModel,\n  UserMetadatumModel,\n  UserModel,\n} from \"../strapi-model\";\nimport { IUserProfile } from \"../types\";\n\n/**\n * Access Strapi endpoints.\n */\nexport function useStrapi(token?: string) {\n  const axios = useMemo(() => {\n    const axios = Axios.create({\n      baseURL: process.env.REACT_APP_STRAPI_BASE,\n    });\n\n    axios.interceptors.request.use((req) => {\n      token && (req.headers.authorization = `Bearer ${token}`);\n      return req;\n    });\n\n    axios.interceptors.response.use(\n      (res) => res,\n      (err) => {\n        if (err.response.data.message)\n          err.id = err.response.data.message[0].messages[0].id;\n        else err.id = err.message;\n        throw err;\n      }\n    );\n\n    return axios;\n  }, [token]);\n\n  return {\n    postLoginLocal: useCallback(\n      async (values: LoginValues): Promise<LoginLocalApiReturn> =>\n        (await axios.post<LoginLocalApiReturn>(\"/auth/local\", values)).data,\n      [axios]\n    ),\n    postRegisterLocal: useCallback(\n      async (values: RegisterValues): Promise<LoginLocalApiReturn> =>\n        (await axios.post<LoginLocalApiReturn>(\"/auth/local/register\", values))\n          .data,\n      [axios]\n    ),\n    getRedirectConnectLoginUrl: useCallback(\n      (service: string) =>\n        `${axios.getUri({\n          url: `${process.env.REACT_APP_STRAPI_BASE}/connect/${service}`,\n        })}`,\n      [axios]\n    ),\n    getConnectCallback: useCallback(\n      async (\n        provider: string,\n        searchString: string\n      ): Promise<LoginLocalApiReturn> =>\n        (\n          await axios.get<LoginLocalApiReturn>(\n            `/auth/${provider}/callback${searchString}`\n          )\n        ).data,\n      [axios]\n    ),\n    getUserMe: useCallback(\n      async (token?: string): Promise<UserModel> =>\n        (\n          await axios.get<UserModel>(\n            \"/users/me\",\n            token\n              ? {\n                  headers: { authorization: `Bearer ${token}` },\n                }\n              : {}\n          )\n        ).data,\n      [axios]\n    ),\n    postUpload: useCallback(\n      async (formData: FormData, token?: string) =>\n        (\n          await axios.post(\"/upload\", formData, {\n            headers: Object.assign(\n              {\n                \"Content-Type\": \"multipart/form-data\",\n              },\n              token\n                ? {\n                    authorization: `Bearer ${token}`,\n                  }\n                : {}\n            ),\n          })\n        ).data,\n      [axios]\n    ),\n    putUserMetadataMe: useCallback(\n      async (\n        userMetaId: number,\n        data: Partial<UserMetadatumModel>\n      ): Promise<UserMetadatumModel> =>\n        (await axios.put<UserMetadatumModel>(\"/user-metadata/me\", data)).data,\n      [axios]\n    ),\n    postForgotPassword: useCallback(\n      async (email: string) =>\n        (\n          await axios.post(`/auth/forgot-password`, {\n            email,\n          })\n        ).data,\n      [axios]\n    ),\n    postResetPassword: useCallback(\n      async (code: string, password: string, passwordConfirmation: string) =>\n        (\n          await axios.post(`/auth/reset-password`, {\n            code,\n            password,\n            passwordConfirmation,\n          })\n        ).data,\n      [axios]\n    ),\n    getSekaiProfileMe: useCallback(\n      async (token?: string): Promise<SekaiProfileModel> =>\n        (\n          await axios.get<SekaiProfileModel>(\n            \"/sekai-profiles/me\",\n            token\n              ? {\n                  headers: { authorization: `Bearer ${token}` },\n                }\n              : {}\n          )\n        ).data,\n      [axios]\n    ),\n    postSekaiProfileVerify: useCallback(\n      async (\n        userid: string\n      ): Promise<{\n        id: number;\n        token: string;\n      }> =>\n        (\n          await axios.post<{\n            id: number;\n            token: string;\n          }>(\"/sekai-profiles/verify\", {\n            userid,\n          })\n        ).data,\n      [axios]\n    ),\n    postSekaiProfileConfirm: useCallback(\n      async (id: number, userid: string): Promise<{ profile: IUserProfile }> =>\n        (\n          await axios.post<{ profile: IUserProfile }>(\n            `/sekai-profiles/${id}/confirm`,\n            {\n              userid,\n            }\n          )\n        ).data,\n      [axios]\n    ),\n    putSekaiProfileUpdate: useCallback(\n      async (id: number): Promise<{ profile: IUserProfile }> =>\n        (\n          await axios.put<{ profile: IUserProfile }>(\n            `/sekai-profiles/${id}/update`\n          )\n        ).data,\n      [axios]\n    ),\n    getLanguages: useCallback(\n      async (): Promise<LanguageModel[]> =>\n        (await axios.get<LanguageModel[]>(\"/languages\")).data,\n      [axios]\n    ),\n    getUserMetadataMe: useCallback(\n      async (token?: string): Promise<UserMetadatumModel> =>\n        (\n          await axios.get<UserMetadatumModel>(\n            \"/user-metadata/me\",\n            token\n              ? {\n                  headers: { authorization: `Bearer ${token}` },\n                }\n              : {}\n          )\n        ).data,\n      [axios]\n    ),\n    getSekaiCurrentEvent: useCallback(\n      async (): Promise<SekaiCurrentEventModel> =>\n        (await axios.get<SekaiCurrentEventModel>(\"/sekai-current-event\")).data,\n      [axios]\n    ),\n    getSekaiProfileEventRecordMe: useCallback(\n      async (eventId?: number): Promise<SekaiProfileEventRecordModel[]> =>\n        (\n          await axios.get<SekaiProfileEventRecordModel[]>(\n            \"/sekai-profile-event-records/me\",\n            {\n              params: eventId\n                ? {\n                    eventId,\n                  }\n                : {},\n            }\n          )\n        ).data,\n      [axios]\n    ),\n    postSekaiProfileEventRecord: useCallback(\n      async (eventId: number) =>\n        (await axios.post(\"/sekai-profile-event-records/record\", { eventId }))\n          .data,\n      [axios]\n    ),\n    getAnnouncements: useCallback(\n      async () =>\n        (\n          await axios.get<AnnouncementModel[]>(\"/announcements?\", {\n            params: {\n              _sort: \"isPin:DESC\",\n            },\n          })\n        ).data,\n      [axios]\n    ),\n    getAnnouncementById: useCallback(\n      async (id: string) =>\n        (await axios.get<AnnouncementModel>(`/announcements/${id}`)).data,\n      [axios]\n    ),\n    getAnnouncementPage: useCallback(\n      async (limit: number = 30, page: number = 0) =>\n        (\n          await axios.get<AnnouncementModel[]>(\"/announcements\", {\n            params: {\n              _limit: limit,\n              _start: page * limit,\n              _sort: \"isPin:DESC\",\n            },\n          })\n        ).data,\n      [axios]\n    ),\n    getAnnouncementCount: useCallback(\n      async () => Number((await axios.get(\"/announcements/count\")).data),\n      [axios]\n    ),\n    getComments: useCallback(\n      async (contentType: string, id: string | number) =>\n        (await axios.get(`/comments/${contentType}:${id}`)).data,\n      [axios]\n    ),\n    postComment: useCallback(\n      async (\n        contentType: string,\n        id: string | number,\n        userId: number,\n        content: string\n      ) =>\n        (\n          await axios.post(`/comments/${contentType}:${id}`, {\n            authorUser: userId,\n            content,\n            related: [\n              {\n                refId: id,\n                ref: contentType,\n                field: \"comments\",\n              },\n            ],\n          })\n        ).data,\n      [axios]\n    ),\n    getUserInfo: useCallback(\n      async (id: string | number) =>\n        (await axios.get<UserModel>(`/users/${id}`)).data,\n      [axios]\n    ),\n    patchCommentLike: useCallback(\n      async (\n        contentType: string,\n        contentId: string | number,\n        commentId: string | number\n      ) =>\n        (\n          await axios.patch<CommentModel>(\n            `/comments/${contentType}:${contentId}/comment/${commentId}/like`\n          )\n        ).data,\n      [axios]\n    ),\n    postCommentAbuse: useCallback(\n      async (\n        contentType: string,\n        contentId: string | number,\n        commentId: string | number,\n        reason: CommentAbuseReason,\n        content: string\n      ) =>\n        (\n          await axios.post(\n            `/comments/${contentType}:${contentId}/comment/${commentId}/report-abuse`,\n            {\n              reason,\n              content,\n            }\n          )\n        ).data,\n      [axios]\n    ),\n  };\n}\n\n/**\n * Access api.sekai.best endpoints.\n */\n// export function useApi() {\n//   const axios = Axios.create({\n//     baseURL: process.env.REACT_APP_API_BACKEND_BASE,\n//   });\n// }\n","import {\n  Button,\n  // Chip,\n  CircularProgress,\n  Container,\n  FormControl,\n  Grid,\n  InputAdornment,\n  InputLabel,\n  MenuItem,\n  Typography,\n} from \"@material-ui/core\";\nimport { AccountCircle, Email, VpnKey } from \"@material-ui/icons\";\nimport { Field } from \"formik\";\nimport { Form, Formik } from \"formik\";\nimport { Select, TextField } from \"formik-material-ui\";\nimport React, { Fragment, useCallback, useEffect, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useHistory, Link as RouteLink } from \"react-router-dom\";\nimport PasswordStrengthBar from \"react-password-strength-bar\";\nimport { useInteractiveStyles } from \"../../styles/interactive\";\nimport { useLayoutStyles } from \"../../styles/layout\";\nimport { LanguageModel, RegisterValues } from \"../../strapi-model\";\nimport { useStrapi } from \"../../utils/apiClient\";\nimport useJwtAuth from \"../../utils/jwt\";\n\nconst Signup: React.FC<{}> = () => {\n  const layoutClasses = useLayoutStyles();\n  const interactiveClasses = useInteractiveStyles();\n  const { t } = useTranslation();\n  const jwtAuth = useJwtAuth();\n  const history = useHistory();\n  const { postRegisterLocal, getLanguages } = useStrapi();\n\n  const [passwordScore, setPasswordScore] = useState(0);\n  const [langs, setLangs] = useState<LanguageModel[]>([]);\n\n  useEffect(() => {\n    document.title = t(\"title:signup\");\n  }, [t]);\n\n  useEffect(() => {\n    getLanguages().then((data) => setLangs(data));\n  }, [getLanguages]);\n\n  const handleValidate = useCallback(\n    (values) => {\n      const errors: Partial<RegisterValues> = {};\n      if (!values.username) {\n        errors.username = t(\"auth:error.required\");\n      }\n      if (!values.password) {\n        errors.password = t(\"auth:error.required\");\n      } else if (values.password.length < 6) {\n        errors.password = t(\"auth:error.passwordTooShort\");\n      } else if (passwordScore < 3) {\n        errors.password = t(\"auth:error.passwordStrength\");\n      }\n      if (!values.confirmPassword) {\n        errors.confirmPassword = t(\"auth:error.required\");\n      } else if (values.confirmPassword !== values.password) {\n        errors.confirmPassword = t(\"auth:error.confirmPasswordMismatch\");\n      }\n      if (!values.email) {\n        errors.email = t(\"auth:error.required\");\n      } else if (\n        !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)\n      ) {\n        errors.email = t(\"auth:error.emailInvalid\");\n      }\n      return errors;\n    },\n    [passwordScore, t]\n  );\n\n  return (\n    <Fragment>\n      <Typography variant=\"h6\" className={layoutClasses.header}>\n        {t(\"common:signup\")}\n      </Typography>\n      <Container className={layoutClasses.content} maxWidth=\"md\">\n        <Formik\n          initialValues={{\n            username: \"\",\n            email: \"\",\n            password: \"\",\n            confirmPassword: \"\",\n            languages: [],\n          }}\n          validate={handleValidate}\n          onSubmit={async (values, { setErrors }) => {\n            try {\n              const data = await postRegisterLocal(values);\n              // jwtAuth.token = data.jwt;\n              jwtAuth.user = data.user;\n              // jwtAuth.usermeta = await getUserMetadataMe(data.jwt);\n              history.push(\"/user/confirmation\");\n              // window.location.reload();\n              localStorage.setItem(\n                \"lastUserCheck\",\n                String(new Date().getTime())\n              );\n            } catch (error) {\n              // console.log(error.response.data);\n              if (error.id === \"Auth.form.error.email.taken\")\n                setErrors({\n                  email: t(\"auth:error.email_taken\"),\n                });\n              else if (error.id === \"Auth.form.error.username.taken\")\n                setErrors({\n                  username: t(\"auth:error.usernameTaken\"),\n                });\n            }\n          }}\n        >\n          {({ submitForm, isSubmitting, dirty, isValid, values }) => (\n            <Grid container justify=\"center\">\n              <Grid item>\n                <Form>\n                  <Field\n                    component={TextField}\n                    name=\"username\"\n                    type=\"text\"\n                    label={t(\"auth:signup.label.username\")}\n                    InputProps={{\n                      startAdornment: (\n                        <InputAdornment position=\"start\">\n                          <AccountCircle />\n                        </InputAdornment>\n                      ),\n                    }}\n                  ></Field>\n                  <br />\n                  <br />\n                  <Field\n                    component={TextField}\n                    name=\"email\"\n                    type=\"email\"\n                    label={t(\"auth:signup.label.email\")}\n                    InputProps={{\n                      startAdornment: (\n                        <InputAdornment position=\"start\">\n                          <Email />\n                        </InputAdornment>\n                      ),\n                    }}\n                  ></Field>\n                  <br />\n                  <br />\n                  <Field\n                    component={TextField}\n                    name=\"password\"\n                    type=\"password\"\n                    label={t(\"auth:signup.label.password\")}\n                    InputProps={{\n                      startAdornment: (\n                        <InputAdornment position=\"start\">\n                          <VpnKey />\n                        </InputAdornment>\n                      ),\n                    }}\n                  ></Field>\n                  <br />\n                  <PasswordStrengthBar\n                    password={values.password}\n                    minLength={6}\n                    onChangeScore={(score) => setPasswordScore(score)}\n                    scoreWords={[\n                      t(\"auth:password.too_weak\"),\n                      t(\"auth:password.weak\"),\n                      t(\"auth:password.okay\"),\n                      t(\"auth:password.good\"),\n                      t(\"auth:password.strong\"),\n                    ]}\n                    shortScoreWord={t(\"auth:password.too_short\")}\n                  />\n                  <br />\n                  <Field\n                    component={TextField}\n                    name=\"confirmPassword\"\n                    type=\"password\"\n                    label={t(\"auth:signup.label.confirm_password\")}\n                    InputProps={{\n                      startAdornment: (\n                        <InputAdornment position=\"start\">\n                          <VpnKey />\n                        </InputAdornment>\n                      ),\n                    }}\n                  ></Field>\n                  <br />\n                  <br />\n                  <FormControl>\n                    <InputLabel shrink htmlFor=\"language-select\">\n                      {t(\"auth:signup.label.prefer_langs\")}\n                    </InputLabel>\n                    <Field\n                      component={Select}\n                      type=\"text\"\n                      multiple={true}\n                      name=\"languages\"\n                      inputProps={{\n                        name: \"languages\",\n                        id: \"language-select\",\n                      }}\n                      style={{ width: 210 }}\n                    >\n                      {langs\n                        .filter((lang) => lang.enabled)\n                        .map((lang) => (\n                          <MenuItem value={lang.id} key={`lang-${lang.code}`}>\n                            {lang.name}\n                          </MenuItem>\n                        ))}\n                    </Field>\n                  </FormControl>\n                  <br />\n                  <br />\n                  <RouteLink\n                    to=\"/user/login\"\n                    className={interactiveClasses.noDecoration}\n                  >\n                    <Typography variant=\"caption\" color=\"textPrimary\">\n                      {t(\"auth:already-have-account\")}\n                    </Typography>\n                  </RouteLink>\n                  <br />\n                  <br />\n                  <input type=\"submit\" style={{ display: \"none\" }} />\n                  <Grid container alignItems=\"center\" spacing={1}>\n                    <Grid item>\n                      <Button\n                        variant=\"contained\"\n                        color=\"primary\"\n                        disabled={isSubmitting || !dirty || !isValid}\n                        onClick={submitForm}\n                      >\n                        {t(\"auth:common.signupButton\")}{\" \"}\n                      </Button>\n                    </Grid>\n                    {isSubmitting && (\n                      <Grid item>\n                        <CircularProgress size={24} />\n                      </Grid>\n                    )}\n                  </Grid>\n                </Form>\n              </Grid>\n            </Grid>\n          )}\n        </Formik>\n      </Container>\n    </Fragment>\n  );\n};\n\nexport default Signup;\n"],"sourceRoot":""}