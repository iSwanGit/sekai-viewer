{"version":3,"sources":["styles/interactive.ts","components/subs/InfiniteScroll.tsx","stores/reducers.ts","components/mission/normal/GridView.tsx","components/mission/normal/NormalMissionList.tsx"],"names":["useInteractiveStyles","makeStyles","theme","container","margin","spacing","padding","caption","breakpoints","up","textAlign","sliderContainer","paddingRight","inputHidden","display","noDecoration","textDecoration","color","palette","text","primary","defaultGridSize","xs","md","InfiniteScroll","ViewComponent","callback","data","_gridSize","gridSize","viewProps","onComponentClick","forEach","v","i","a","transformToCompleteGridSizeOptions","breakpoint","useTheme","map","useMediaQuery","down","find","Boolean","length","useBreakpoint","useState","hasMore","setHasMore","observer","useRef","IntersectionObserver","entries","threshold","listElementRef","useEffect","currentObserver","current","currentElement","observe","unobserve","itemsPerRow","numPlaceholders","direction","key","id","item","sm","lg","xl","onClick","index","ref","style","paddingTop","Array","from","_","characterSelectReducer","state","action","type","payload","slice","indexOf","Error","attrSelectReducer","missionTypeReducer","teamBuildReducer","teams","localStorage","setItem","JSON","stringify","useStyles","media","backgroundSize","card","cursor","header","ListCard","grid","classes","getTranslated","useAssetI18n","contentTransMode","useContext","SettingContext","useCachedData","resourceBoxes","rewards","setRewards","rb","resourceBoxPurpose","some","reward","resourceBoxId","details","Card","className","Grid","alignItems","CardContent","paddingBottom","ContentTrans","mode","contentKey","original","sentence","originalProps","variant","CardMedia","title","resourceType","MaterialIcon","materialId","resourceId","quantity","resourceQuantity","CommonMaterialIcon","materialName","Typography","Skeleton","width","justify","height","NormalMissionList","layoutClasses","useLayoutStyles","interactiveClasses","t","useTranslation","normalMissionsCache","normalMissions","setNormalMissions","getItem","viewGridType","useRefState","page","pageRef","setPage","limit","limitRef","lastQueryFinRef","setLastQueryFin","isReadyRef","setIsReady","filterOpened","setFilterOpened","useReducer","missionTypeSelected","dispatchMissionTypeSelected","sortedCache","sortedCacheRef","setSortedCache","document","result","filter","c","mt","normalMissionType","includes","events","getPaginatedHonorMissions","Container","content","ButtonGroup","marginBottom","Button","size","Sort","SortOutlined","Collapse","in","Paper","root","tag","Chip","clickable","label","isIntersecting","agenda","comfy"],"mappings":"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","file":"static/js/46.69d1a0d7.chunk.js","sourcesContent":["import { makeStyles } from \"@material-ui/core\";\n\nconst useInteractiveStyles = makeStyles((theme) => ({\n  container: {\n    margin: theme.spacing(1, 0),\n    padding: theme.spacing(1, 2),\n  },\n  caption: {\n    [theme.breakpoints.up(\"md\")]: {\n      textAlign: \"right\",\n    },\n  },\n  sliderContainer: {\n    [theme.breakpoints.up(\"md\")]: {\n      paddingRight: theme.spacing(5),\n    },\n  },\n  inputHidden: {\n    display: \"none\",\n  },\n  noDecoration: {\n    textDecoration: \"none\",\n    \"&:hover\": {\n      textDecoration: \"underline\",\n    },\n    color: theme.palette.text.primary,\n  },\n}));\n\nexport { useInteractiveStyles };\n","import {\n  // Box,\n  Grid,\n  // makeStyles,\n  useMediaQuery,\n  useTheme,\n} from \"@material-ui/core\";\nimport React, { Fragment, useEffect, useRef, useState } from \"react\";\n\n// only divisor of 12\ntype GridSize = 1 | 2 | 3 | 4 | 6 | 12 | undefined;\n\ninterface GridSizeOptions {\n  /**\n   * grid size for `xs` and wider (if not overridden) \\\n   * omit this property or set `undefined` to use default (12)\n   */\n  xs?: GridSize;\n  /**\n   * grid size for `sm` and wider (if not overridden) \\\n   * omit this property or set `undefined` to inherit from `xs` \\\n   */\n  sm?: GridSize;\n  /**\n   * grid size for `md` and wider (if not overridden) \\\n   * omit this property or set `undefined` to inherit from `sm` \\\n   */\n  md?: GridSize;\n  /**\n   * grid size for `lg` and wider (if not overridden) \\\n   * omit this property or set `undefined` to inherit from `md` \\\n   */\n  lg?: GridSize;\n  /**\n   * grid size for `xl` and wider \\\n   * omit this property or set `undefined` to inherit from `lg` \\\n   */\n  xl?: GridSize;\n}\n\ntype CompleteGridSizeOptions = {\n  [T in keyof Required<GridSizeOptions>]: Exclude<GridSize, undefined>;\n};\n\ninterface IISProps<T> {\n  readonly ViewComponent: React.FC<\n    { data?: T; index?: number } & { [key: string]: any }\n  >;\n  readonly callback: (\n    entries: readonly IntersectionObserverEntry[],\n    setHasMore: React.Dispatch<React.SetStateAction<boolean>>\n  ) => void;\n  readonly data: readonly T[];\n  readonly gridSize?: Readonly<GridSizeOptions>;\n  readonly viewProps?: { [key: string]: any };\n  readonly onComponentClick?: (data: T) => void;\n}\n\n// NOTE: `breakpoints` must be sorted ascending by size\nconst breakpoints = [\"xs\", \"sm\", \"md\", \"lg\", \"xl\"] as const;\n\nconst defaultXSGridSize: GridSize = 12;\nconst defaultGridSize: Readonly<GridSizeOptions> = {\n  xs: defaultXSGridSize,\n  md: 4,\n};\n\nfunction useBreakpoint(): keyof GridSizeOptions {\n  const theme = useTheme();\n\n  // NOTE: The number of calls to `useMediaQuery` must always be constant.\n  // https://en.reactjs.org/docs/hooks-rules.html#only-call-hooks-at-the-top-level\n  const downBreakpoints = breakpoints.map(\n    (breakpoint) =>\n      // NOTE: `down` includes itself\n      // eslint-disable-next-line react-hooks/rules-of-hooks\n      useMediaQuery(theme.breakpoints.down(breakpoint)) && breakpoint\n  );\n\n  // NOTE: `down('xl')` always returns `true` so `|| breakpoints[breakpoints.length - 1]`\n  //       is not actually needed, but it's written for clarity and typing.\n  return downBreakpoints.find(Boolean) || breakpoints[breakpoints.length - 1];\n}\n\nfunction transformToCompleteGridSizeOptions(\n  _gridSize?: Readonly<GridSizeOptions> | undefined\n): CompleteGridSizeOptions {\n  // use default if gridSize is not provided\n  // not using defaults per properties because `{ md: 4 }` would not be desired\n  const gridSize = {\n    ...(_gridSize || defaultGridSize),\n  };\n\n  // inherit the value of the smaller breakpoint if not specified\n  breakpoints.forEach((v, i, a) => {\n    if (!gridSize[v]) {\n      gridSize[v] = i > 0 ? gridSize[a[i - 1]] : defaultXSGridSize;\n    }\n  });\n\n  return gridSize as CompleteGridSizeOptions;\n}\n\nfunction InfiniteScroll<T>({\n  ViewComponent,\n  callback,\n  data,\n  gridSize: _gridSize,\n  viewProps,\n  onComponentClick,\n}: React.PropsWithChildren<IISProps<T & { id: number }>>): React.ReactElement<\n  IISProps<T>\n> {\n  // this is necessary because of `viewGridSize`\n  const gridSize = transformToCompleteGridSizeOptions(_gridSize);\n\n  const breakpoint = useBreakpoint();\n\n  const [hasMore, setHasMore] = useState<boolean>(true);\n\n  const observer = useRef(\n    new IntersectionObserver((entries) => callback(entries, setHasMore), {\n      threshold: 0.5,\n    })\n  );\n  const listElementRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    setHasMore(true);\n  }, [data]);\n\n  useEffect(() => {\n    const currentObserver = observer.current;\n    const currentElement = listElementRef.current;\n    if (currentElement) currentObserver.observe(currentElement);\n\n    return () => {\n      if (currentElement) {\n        currentObserver.unobserve(currentElement);\n      }\n    };\n  });\n\n  const viewGridSize = gridSize[breakpoint];\n  const itemsPerRow = 12 / viewGridSize;\n  const numPlaceholders = data.length ? itemsPerRow : itemsPerRow * 2;\n\n  return (\n    <Fragment>\n      <Grid container direction=\"row\" spacing={1}>\n        {data.length\n          ? data.map((data, i) => (\n              <Grid\n                key={data.id}\n                item\n                xs={gridSize.xs}\n                sm={gridSize.sm}\n                md={gridSize.md}\n                lg={gridSize.lg}\n                xl={gridSize.xl}\n                onClick={() => {\n                  if (onComponentClick) onComponentClick(data);\n                }}\n              >\n                <ViewComponent data={data} index={i} {...viewProps} />\n              </Grid>\n            ))\n          : null}\n      </Grid>\n      <Grid\n        container\n        direction=\"row\"\n        ref={listElementRef}\n        style={{ display: hasMore ? \"flex\" : \"none\", paddingTop: \"4px\" }}\n        spacing={1}\n      >\n        {Array.from({\n          length: numPlaceholders,\n        }).map((_, i) => (\n          <Grid\n            key={`empty-${i}`}\n            item\n            xs={gridSize.xs}\n            sm={gridSize.sm}\n            md={gridSize.md}\n            lg={gridSize.lg}\n            xl={gridSize.xl}\n          >\n            <ViewComponent />\n          </Grid>\n        ))}\n      </Grid>\n    </Fragment>\n  );\n}\n\nexport default InfiniteScroll;\n","import { ITeamBuild } from \"../types\";\n\nexport function characterSelectReducer(\n  state: number[],\n  action: { type: \"add\" | \"remove\" | \"reset\"; payload: number }\n) {\n  switch (action.type) {\n    case \"add\":\n      return [...state, action.payload];\n    case \"remove\":\n      return [\n        ...state.slice(0, state.indexOf(action.payload)),\n        ...state.slice(state.indexOf(action.payload) + 1),\n      ];\n    case \"reset\":\n      return [];\n    default:\n      throw new Error();\n  }\n}\n\nexport function attrSelectReducer(\n  state: string[],\n  action: { type: \"add\" | \"remove\" | \"reset\"; payload: string }\n) {\n  switch (action.type) {\n    case \"add\":\n      return [...state, action.payload];\n    case \"remove\":\n      return [\n        ...state.slice(0, state.indexOf(action.payload)),\n        ...state.slice(state.indexOf(action.payload) + 1),\n      ];\n    case \"reset\":\n      return [];\n    default:\n      throw new Error();\n  }\n}\n\nexport function missionTypeReducer(\n  state: string[],\n  action: { type: \"add\" | \"remove\" | \"reset\"; payload: string }\n) {\n  switch (action.type) {\n    case \"add\":\n      return [...state, action.payload];\n    case \"remove\":\n      return [\n        ...state.slice(0, state.indexOf(action.payload)),\n        ...state.slice(state.indexOf(action.payload) + 1),\n      ];\n    case \"reset\":\n      return [];\n    default:\n      throw new Error();\n  }\n}\n\nexport function teamBuildReducer(\n  state: ITeamBuild[],\n  action:\n    | { type: \"add\"; payload: ITeamBuild }\n    | { type: \"remove\"; payload: number }\n    | { type: \"replace\"; payload: { id: number; data: ITeamBuild } }\n) {\n  switch (action.type) {\n    case \"add\": {\n      const teams = [...state, action.payload];\n      localStorage.setItem(\"team-build-array\", JSON.stringify(teams));\n      return teams;\n    }\n    case \"remove\": {\n      const teams = [\n        ...state.slice(0, action.payload),\n        ...state.slice(action.payload + 1),\n      ];\n      localStorage.setItem(\"team-build-array\", JSON.stringify(teams));\n      return teams;\n    }\n    case \"replace\": {\n      const teams = [\n        ...state.slice(0, action.payload.id),\n        action.payload.data,\n        ...state.slice(action.payload.id + 1),\n      ];\n      localStorage.setItem(\"team-build-array\", JSON.stringify(teams));\n      return teams;\n    }\n    default:\n      throw new Error();\n  }\n}\n","import {\n  Card,\n  CardContent,\n  CardMedia,\n  Grid,\n  makeStyles,\n  Typography,\n} from \"@material-ui/core\";\nimport { Skeleton } from \"@material-ui/lab\";\nimport React, { Fragment, useContext, useEffect, useState } from \"react\";\nimport { SettingContext } from \"../../../context\";\nimport {\n  INormalMission,\n  IResourceBoxInfo,\n  ResourceBoxDetail,\n} from \"../../../types\";\nimport { useAssetI18n } from \"../../../utils/i18n\";\nimport { ContentTrans } from \"../../subs/ContentTrans\";\nimport CommonMaterialIcon from \"../../subs/CommonMaterialIcon\";\nimport { useCachedData } from \"../../../utils\";\nimport MaterialIcon from \"../../subs/MaterialIcon\";\n\nconst useStyles = makeStyles((theme) => ({\n  media: {\n    paddingTop: \"5%\",\n    backgroundSize: \"contain\",\n  },\n  card: {\n    cursor: \"pointer\",\n  },\n  header: {},\n  \"grid-out\": {\n    padding: theme.spacing(\"1%\", \"2%\"),\n  },\n}));\n\nconst GridView: React.FC<{ data?: INormalMission }> = ({ data }) => {\n  const classes = useStyles();\n  // const { t } = useTranslation();\n  const { getTranslated } = useAssetI18n();\n  // const { path } = useRouteMatch();\n  const { contentTransMode } = useContext(SettingContext)!;\n\n  const [resourceBoxes] = useCachedData<IResourceBoxInfo>(\"resourceBoxes\");\n\n  const [rewards, setRewards] = useState<ResourceBoxDetail[]>([]);\n\n  useEffect(() => {\n    if (resourceBoxes.length && data) {\n      setRewards(\n        resourceBoxes.find(\n          (rb) =>\n            rb.resourceBoxPurpose === \"mission_reward\" &&\n            data.rewards.some((reward) => reward.resourceBoxId === rb.id)\n        )!.details\n      );\n    }\n  }, [data, resourceBoxes]);\n\n  if (!data) {\n    // loading\n    return (\n      <Card className={classes.card}>\n        {/* <Skeleton variant=\"rect\" className={classes.media}></Skeleton> */}\n        <Grid container alignItems=\"center\">\n          <Grid item xs={8}>\n            <CardContent>\n              <Typography variant=\"subtitle1\" className={classes.header}>\n                <Skeleton variant=\"text\" width=\"90%\"></Skeleton>\n              </Typography>\n            </CardContent>\n          </Grid>\n          <Grid item xs={4} container justify=\"center\">\n            <Skeleton variant=\"rect\" height=\"48px\" width=\"48px\"></Skeleton>\n          </Grid>\n        </Grid>\n      </Card>\n    );\n  }\n  return (\n    <Fragment>\n      <Card className={classes.card}>\n        <Grid container alignItems=\"center\">\n          <Grid item xs={8} md={9}>\n            <CardContent style={{ paddingBottom: \"16px\" }}>\n              <Grid container direction=\"column\" spacing={1}>\n                <Grid item>\n                  <ContentTrans\n                    mode={contentTransMode}\n                    contentKey={`normal_mission:${data.id}`}\n                    original={data.sentence}\n                    originalProps={{\n                      variant: \"subtitle1\",\n                      className: classes.header,\n                    }}\n                  />\n                </Grid>\n              </Grid>\n            </CardContent>\n          </Grid>\n          <Grid item xs={4} md={3}>\n            <CardMedia\n              className={classes.media}\n              title={getTranslated(\n                contentTransMode,\n                `normal_mission:${data.id}`,\n                data.sentence\n              )}\n            >\n              {rewards.map((reward) =>\n                reward.resourceType === \"material\" ? (\n                  <MaterialIcon\n                    materialId={reward.resourceId!}\n                    quantity={reward.resourceQuantity}\n                  />\n                ) : (\n                  <CommonMaterialIcon\n                    materialName={reward.resourceType}\n                    quantity={reward.resourceQuantity}\n                  />\n                )\n              )}\n            </CardMedia>\n          </Grid>\n        </Grid>\n      </Card>\n    </Fragment>\n  );\n};\n\nexport default GridView;\n","import {\n  Button,\n  ButtonGroup,\n  Chip,\n  Collapse,\n  Container,\n  Grid,\n  Paper,\n  Typography,\n} from \"@material-ui/core\";\nimport { Sort, SortOutlined } from \"@material-ui/icons\";\nimport { Filter, FilterOutline } from \"mdi-material-ui\";\nimport React, { useState, useEffect, Fragment, useReducer } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { missionTypeReducer } from \"../../../stores/reducers\";\nimport { useInteractiveStyles } from \"../../../styles/interactive\";\nimport { useLayoutStyles } from \"../../../styles/layout\";\nimport { INormalMission } from \"../../../types\";\nimport { useCachedData, useRefState } from \"../../../utils\";\nimport InfiniteScroll from \"../../subs/InfiniteScroll\";\nimport GridView from \"./GridView\";\n\ntype ViewGridType = \"grid\" | \"agenda\" | \"comfy\";\n\nconst ListCard: { [key: string]: React.FC<{ data?: INormalMission }> } = {\n  grid: GridView,\n};\n\nfunction getPaginatedHonorMissions(\n  events: INormalMission[],\n  page: number,\n  limit: number\n) {\n  return events.slice(limit * (page - 1), limit * page);\n}\n\nconst NormalMissionList: React.FC<{}> = () => {\n  const layoutClasses = useLayoutStyles();\n  const interactiveClasses = useInteractiveStyles();\n  const { t } = useTranslation();\n\n  const [normalMissionsCache] = useCachedData<INormalMission>(\"normalMissions\");\n\n  const [normalMissions, setNormalMissions] = useState<INormalMission[]>([]);\n\n  const [viewGridType] = useState<ViewGridType>(\n    (localStorage.getItem(\"event-list-grid-view-type\") ||\n      \"grid\") as ViewGridType\n  );\n  const [page, pageRef, setPage] = useRefState<number>(1);\n  const [limit, limitRef] = useRefState<number>(12);\n  const [, lastQueryFinRef, setLastQueryFin] = useRefState<boolean>(true);\n  const [, isReadyRef, setIsReady] = useRefState<boolean>(false);\n  const [filterOpened, setFilterOpened] = useState<boolean>(false);\n  const [missionTypeSelected, dispatchMissionTypeSelected] = useReducer(\n    missionTypeReducer,\n    []\n  );\n  const [sortedCache, sortedCacheRef, setSortedCache] = useRefState<\n    INormalMission[]\n  >([]);\n\n  useEffect(() => {\n    document.title = t(\"title:normalMissionList\");\n  }, [t]);\n\n  useEffect(() => {\n    if (normalMissionsCache.length) {\n      let result = [...normalMissionsCache];\n      // do filter\n      if (missionTypeSelected.length) {\n        result = result.filter((c) =>\n          missionTypeSelected.some((mt) => c.normalMissionType.includes(mt))\n        );\n      }\n      setSortedCache(result);\n      setNormalMissions([]);\n      setPage(0);\n    }\n  }, [normalMissionsCache, setPage, setSortedCache, missionTypeSelected]);\n\n  useEffect(() => {\n    setNormalMissions((events) => [\n      ...events,\n      ...getPaginatedHonorMissions(sortedCache, page, limit),\n    ]);\n    setLastQueryFin(true);\n  }, [page, limit, setLastQueryFin, sortedCache]);\n\n  useEffect(() => {\n    setIsReady(Boolean(normalMissionsCache.length));\n  }, [setIsReady, normalMissionsCache]);\n\n  const callback = (\n    entries: readonly IntersectionObserverEntry[],\n    setHasMore: React.Dispatch<React.SetStateAction<boolean>>\n  ) => {\n    if (!isReadyRef.current) return;\n    if (\n      entries[0].isIntersecting &&\n      lastQueryFinRef.current &&\n      (!sortedCacheRef.current.length ||\n        sortedCacheRef.current.length > pageRef.current * limitRef.current)\n    ) {\n      setPage((page) => page + 1);\n      setLastQueryFin(false);\n    } else if (\n      sortedCacheRef.current.length &&\n      sortedCacheRef.current.length <= pageRef.current * limitRef.current\n    ) {\n      setHasMore(false);\n    }\n  };\n\n  return (\n    <Fragment>\n      <Typography variant=\"h6\" className={layoutClasses.header}>\n        {t(\"common:mission.main\")} - {t(\"common:mission.normal\")}\n      </Typography>\n      <Container className={layoutClasses.content}>\n        <Grid container justify=\"flex-end\">\n          <ButtonGroup color=\"primary\" style={{ marginBottom: \"1%\" }}>\n            <Button size=\"medium\" onClick={() => setFilterOpened((v) => !v)}>\n              {filterOpened ? <Filter /> : <FilterOutline />}\n              {filterOpened ? <Sort /> : <SortOutlined />}\n            </Button>\n          </ButtonGroup>\n        </Grid>\n        <Collapse in={filterOpened}>\n          <Paper className={interactiveClasses.container}>\n            <Grid container direction=\"column\" spacing={1}>\n              <Grid\n                item\n                container\n                xs={12}\n                alignItems=\"center\"\n                justify=\"space-between\"\n              >\n                <Grid item xs={12} md={1}>\n                  <Typography classes={{ root: interactiveClasses.caption }}>\n                    {t(\"filter:missionType.caption\")}\n                  </Typography>\n                </Grid>\n                <Grid item container xs={12} md={10} spacing={1}>\n                  {[\n                    \"make\",\n                    \"skill_level\",\n                    \"master_rank\",\n                    \"character_rank\",\n                    \"set_honor\",\n                    \"clear\",\n                    \"read\",\n                    \"use\",\n                    \"buy\",\n                    \"inherit\",\n                  ].map((tag) => (\n                    <Grid key={\"mission-type-\" + tag} item>\n                      <Chip\n                        clickable\n                        color={\n                          missionTypeSelected.includes(tag)\n                            ? \"primary\"\n                            : \"default\"\n                        }\n                        label={t(`mission:type.${tag}`)}\n                        onClick={() => {\n                          if (missionTypeSelected.includes(tag)) {\n                            dispatchMissionTypeSelected({\n                              type: \"remove\",\n                              payload: tag,\n                            });\n                          } else {\n                            dispatchMissionTypeSelected({\n                              type: \"add\",\n                              payload: tag,\n                            });\n                          }\n                        }}\n                      />\n                    </Grid>\n                  ))}\n                </Grid>\n              </Grid>\n            </Grid>\n          </Paper>\n        </Collapse>\n        <InfiniteScroll<INormalMission>\n          ViewComponent={ListCard[viewGridType]}\n          callback={callback}\n          data={normalMissions}\n          gridSize={\n            ({\n              grid: {\n                xs: 12,\n                md: 6,\n              },\n              agenda: {\n                xs: 12,\n              },\n              comfy: {\n                xs: 12,\n              },\n            } as const)[viewGridType]\n          }\n        />\n      </Container>\n    </Fragment>\n  );\n};\n\nexport default NormalMissionList;\n"],"sourceRoot":""}