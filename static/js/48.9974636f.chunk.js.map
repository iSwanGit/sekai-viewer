{"version":3,"sources":["components/subs/ContentTrans.tsx","components/subs/ColorPreview.tsx","components/UnitDetail.tsx"],"names":["ContentTrans","mode","contentKey","original","originalProps","translatedProps","assetTOptions","assetT","useAssetI18n","color","container","direction","CharaNameTrans","characterId","useCachedData","charas","assetI18n","useState","chara","setChara","useEffect","length","find","c","id","firstName","givenName","includes","language","ReleaseCondTrans","releaseCondId","releaseConds","releaseCond","setReleaseCond","rc","i18nKey","releaseConditionType","Object","assign","level","releaseConditionTypeLevel","releaseConditionTypeId","rank","point","releaseConditionTypeQuantity","sentence","ColorPreview","colorCode","displayMode","localStorage","getItem","preferDarkMode","useMediaQuery","style","height","width","border","backgroundColor","useStyle","makeStyles","theme","tabpanel","padding","spacing","media","paddingTop","cursor","nameLabel","backgroundSize","nameVerticalLabel","maxWidth","unitIdTagMap","light_sound","piapro","UnitMusicImage","assetbundleName","title","img","setImg","getRemoteAssetURL","src","alt","UnitDetail","unitId","useParams","classes","layoutClasses","useLayoutStyles","t","useTranslation","getTranslated","contentTransMode","useContext","SettingContext","getCharaName","useCharaName","unitProfiles","gameCharas","musics","musicTags","unit","setUnit","unitCharas","setUnitCharas","unitMusics","setUnitMusics","document","name","unitName","up","filter","gc","unitMusicIds","mt","musicTag","prototype","hasOwnProperty","call","map","musicId","m","variant","className","header","content","textAlign","UnitLogoMap","wrap","justify","alignItems","fontWeight","seq","margin","item","xs","md","profileSentence","count","uc","key","lg","to","textDecoration","charaIcons","align","um"],"mappings":"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","file":"static/js/48.9974636f.chunk.js","sourcesContent":["import { Grid, Typography, TypographyProps } from \"@material-ui/core\";\nimport { StringMap, TOptions } from \"i18next\";\nimport React, { useEffect, useState } from \"react\";\nimport {\n  ContentTransModeType,\n  IGameChara,\n  IReleaseCondition,\n} from \"../../types\";\nimport { useCachedData } from \"../../utils\";\nimport { useAssetI18n } from \"../../utils/i18n\";\n\nexport const ContentTrans: React.FC<{\n  mode: ContentTransModeType;\n  contentKey: string;\n  original: string;\n  originalProps?: TypographyProps;\n  translatedProps?: TypographyProps;\n  assetTOptions?: string | TOptions<StringMap>;\n}> = ({\n  mode,\n  contentKey,\n  original,\n  originalProps,\n  translatedProps,\n  assetTOptions,\n}) => {\n  const { assetT } = useAssetI18n();\n  switch (mode) {\n    case \"original\":\n      return <Typography {...originalProps}>{original}</Typography>;\n    case \"translated\":\n      return (\n        <Typography {...translatedProps} color=\"textPrimary\">\n          {assetT(contentKey, original, assetTOptions)}\n        </Typography>\n      );\n    case \"both\":\n      return (\n        <Grid container direction=\"column\">\n          <Typography {...originalProps} color=\"textPrimary\">\n            {original}\n          </Typography>\n          <Typography {...translatedProps} color=\"textSecondary\">\n            {assetT(contentKey, original, assetTOptions)}\n          </Typography>\n        </Grid>\n      );\n  }\n};\n\nexport const CharaNameTrans: React.FC<{\n  mode: ContentTransModeType;\n  characterId: number;\n  originalProps?: TypographyProps;\n  translatedProps?: TypographyProps;\n  assetTOptions?: string | TOptions<StringMap>;\n}> = ({ mode, characterId, originalProps, translatedProps, assetTOptions }) => {\n  const [charas] = useCachedData<IGameChara>(\"gameCharacters\");\n  const { assetT, assetI18n } = useAssetI18n();\n\n  const [chara, setChara] = useState<IGameChara>();\n\n  useEffect(() => {\n    if (charas.length) {\n      setChara(charas.find((c) => c.id === characterId));\n    }\n  }, [charas, characterId]);\n\n  if (chara) {\n    switch (mode) {\n      case \"original\":\n        return (\n          <Typography {...originalProps} color=\"textPrimary\">\n            {chara.firstName} {chara.givenName}\n          </Typography>\n        );\n      case \"translated\":\n        return [\"zh-CN\", \"zh-TW\", \"ko\", \"ja\"].includes(assetI18n.language) ? (\n          <Typography {...translatedProps} color=\"textPrimary\">\n            {chara.firstName\n              ? assetT(\n                  `character_name:${characterId}.firstName`,\n                  chara.firstName,\n                  assetTOptions\n                )\n              : \"\"}{\" \"}\n            {assetT(\n              `character_name:${characterId}.givenName`,\n              chara.givenName,\n              assetTOptions\n            )}\n          </Typography>\n        ) : (\n          <Typography>\n            {assetT(\n              `character_name:${characterId}.givenName`,\n              chara.givenName,\n              assetTOptions\n            )}{\" \"}\n            {chara.firstName\n              ? assetT(\n                  `character_name:${characterId}.firstName`,\n                  chara.firstName,\n                  assetTOptions\n                )\n              : \"\"}\n          </Typography>\n        );\n      case \"both\":\n        return (\n          <Grid container direction=\"column\">\n            <Typography {...originalProps}>\n              {chara.firstName} {chara.givenName}\n            </Typography>\n            {[\"zh-CN\", \"zh-TW\", \"ko\", \"ja\"].includes(assetI18n.language) ? (\n              <Typography color=\"textSecondary\" {...translatedProps}>\n                {chara.firstName\n                  ? assetT(\n                      `character_name:${characterId}.firstName`,\n                      chara.firstName,\n                      assetTOptions\n                    )\n                  : \"\"}{\" \"}\n                {assetT(\n                  `character_name:${characterId}.givenName`,\n                  chara.givenName,\n                  assetTOptions\n                )}\n              </Typography>\n            ) : (\n              <Typography color=\"textSecondary\" {...translatedProps}>\n                {assetT(\n                  `character_name:${characterId}.givenName`,\n                  chara.givenName,\n                  assetTOptions\n                )}{\" \"}\n                {chara.firstName\n                  ? assetT(\n                      `character_name:${characterId}.firstName`,\n                      chara.firstName,\n                      assetTOptions\n                    )\n                  : \"\"}\n              </Typography>\n            )}\n          </Grid>\n        );\n    }\n  } else {\n    return <Typography></Typography>;\n  }\n};\n\nexport const ReleaseCondTrans: React.FC<{\n  mode: ContentTransModeType;\n  releaseCondId: number;\n  originalProps?: TypographyProps;\n  translatedProps?: TypographyProps;\n  assetTOptions?: string | TOptions<StringMap>;\n}> = ({\n  mode,\n  releaseCondId,\n  originalProps,\n  translatedProps,\n  assetTOptions,\n}) => {\n  const [releaseConds] = useCachedData<IReleaseCondition>(\"releaseConditions\");\n\n  const [releaseCond, setReleaseCond] = useState<IReleaseCondition>();\n\n  useEffect(() => {\n    if (releaseConds.length) {\n      setReleaseCond(releaseConds.find((rc) => rc.id === releaseCondId));\n    }\n  }, [releaseCondId, releaseConds]);\n\n  if (releaseCond) {\n    let i18nKey = \"\";\n    switch (releaseCond.releaseConditionType) {\n      case \"none\":\n        i18nKey = `release_cond:none_${releaseCond.id}`;\n        break;\n      case \"card_level\":\n        i18nKey = `release_cond:card_level`;\n        assetTOptions = Object.assign({}, assetTOptions, {\n          level: releaseCond.releaseConditionTypeLevel,\n        });\n        break;\n      case \"unit_rank\":\n        i18nKey = `release_cond:unit_rank_${releaseCond.releaseConditionTypeId}`;\n        assetTOptions = Object.assign({}, assetTOptions, {\n          rank: releaseCond.releaseConditionTypeLevel,\n        });\n        break;\n      case \"event_point\":\n        i18nKey = `release_cond:event_point`;\n        assetTOptions = Object.assign({}, assetTOptions, {\n          point: releaseCond.releaseConditionTypeQuantity,\n        });\n        break;\n      default:\n        i18nKey = `release_cond:${releaseCond.releaseConditionType}`;\n        break;\n    }\n    return (\n      <ContentTrans\n        mode={mode}\n        contentKey={i18nKey}\n        original={releaseCond.sentence}\n        originalProps={originalProps}\n        translatedProps={translatedProps}\n        assetTOptions={assetTOptions}\n      />\n    );\n  } else {\n    return <div></div>;\n  }\n};\n","import { useMediaQuery } from \"@material-ui/core\";\nimport React from \"react\";\n\nconst ColorPreview: React.FC<{ colorCode: string }> = ({ colorCode }) => {\n  const displayMode =\n    (localStorage.getItem(\"display-mode\") as \"dark\" | \"light\" | \"auto\") ||\n    \"auto\";\n  const preferDarkMode = useMediaQuery(\"(prefers-color-scheme: dark)\");\n  return (\n    <div\n      style={{\n        height: \"26px\",\n        width: \"26px\",\n        border:\n          \"solid 2px \" +\n          (displayMode === \"auto\"\n            ? preferDarkMode\n              ? \"white\"\n              : \"black\"\n            : displayMode === \"dark\"\n            ? \"white\"\n            : \"black\"),\n        backgroundColor: colorCode,\n      }}\n    ></div>\n  );\n};\n\nexport default ColorPreview;\n","import {\n  Container,\n  Divider,\n  Grid,\n  makeStyles,\n  Paper,\n  Typography,\n} from \"@material-ui/core\";\nimport React, { Fragment, useContext, useEffect, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link, useParams } from \"react-router-dom\";\nimport { SettingContext } from \"../context\";\nimport { useLayoutStyles } from \"../styles/layout\";\nimport { IGameChara, IMusicInfo, IMusicTagInfo, IUnitProfile } from \"../types\";\nimport { getRemoteAssetURL, useCachedData, useCharaName } from \"../utils\";\nimport { useAssetI18n } from \"../utils/i18n\";\nimport { charaIcons, UnitLogoMap } from \"../utils/resources\";\nimport ColorPreview from \"./subs/ColorPreview\";\nimport { CharaNameTrans, ContentTrans } from \"./subs/ContentTrans\";\n\nconst useStyle = makeStyles((theme) => ({\n  tabpanel: {\n    padding: theme.spacing(\"1%\", 0, 0, 0),\n  },\n  media: {\n    paddingTop: \"70%\",\n    cursor: \"pointer\",\n  },\n  nameLabel: {\n    paddingTop: \"30%\",\n    backgroundSize: \"contain\",\n  },\n  nameVerticalLabel: {\n    paddingTop: \"45%\",\n    backgroundSize: \"contain\",\n  },\n  \"grid-out\": {\n    padding: theme.spacing(\"1%\", \"0\"),\n  },\n  \"unit-logo-img\": {\n    maxWidth: \"128px\",\n  },\n}));\n\nconst unitIdTagMap: { [key: string]: string } = {\n  light_sound: \"light_music_club\",\n  piapro: \"vocaloid\",\n};\n\nconst UnitMusicImage: React.FC<{\n  assetbundleName: string;\n  title: string;\n}> = ({ assetbundleName, title }) => {\n  const [img, setImg] = useState<string>(\"\");\n\n  useEffect(() => {\n    if (!img)\n      getRemoteAssetURL(\n        `music/jacket/${assetbundleName}_rip/${assetbundleName}.webp`,\n        setImg\n      );\n  }, [assetbundleName, img]);\n\n  return <img src={img} alt={title} style={{ maxWidth: \"100%\" }}></img>;\n};\n\nconst UnitDetail: React.FC<{}> = () => {\n  const { unitId } = useParams<{ unitId: string }>();\n  const classes = useStyle();\n  const layoutClasses = useLayoutStyles();\n  const { t } = useTranslation();\n  const { getTranslated } = useAssetI18n();\n  const { contentTransMode } = useContext(SettingContext)!;\n  const getCharaName = useCharaName(contentTransMode);\n\n  const [unitProfiles] = useCachedData<IUnitProfile>(\"unitProfiles\");\n  const [gameCharas] = useCachedData<IGameChara>(\"gameCharacters\");\n  const [musics] = useCachedData<IMusicInfo>(\"musics\");\n  const [musicTags] = useCachedData<IMusicTagInfo>(\"musicTags\");\n\n  const [unit, setUnit] = useState<IUnitProfile>();\n  const [unitCharas, setUnitCharas] = useState<IGameChara[]>([]);\n  const [unitMusics, setUnitMusics] = useState<IMusicInfo[]>([]);\n\n  useEffect(() => {\n    document.title = t(\"title:unitDetail\", { name: unit?.unitName });\n  }, [t, unit]);\n\n  useEffect(() => {\n    if (\n      unitProfiles.length &&\n      gameCharas.length &&\n      musics.length &&\n      musicTags.length\n    ) {\n      setUnit(unitProfiles.find((up) => up.unit === unitId));\n      setUnitCharas(gameCharas.filter((gc) => gc.unit === unitId));\n      const unitMusicIds = musicTags\n        .filter(\n          (mt) =>\n            mt.musicTag ===\n            (Object.prototype.hasOwnProperty.call(unitIdTagMap, unitId)\n              ? unitIdTagMap[unitId]\n              : unitId)\n        )\n        .map((mt) => mt.musicId);\n      setUnitMusics(musics.filter((m) => unitMusicIds.includes(m.id)));\n    }\n  }, [unitProfiles, unitId, gameCharas, musics, musicTags]);\n\n  return unit ? (\n    <Fragment>\n      <Typography variant=\"h6\" className={layoutClasses.header}>\n        {getTranslated(\n          contentTransMode,\n          `unit_profile:${unit.unit}.name`,\n          unit.unitName\n        )}\n      </Typography>\n      <Container className={layoutClasses.content} maxWidth=\"sm\">\n        <div style={{ textAlign: \"center\" }}>\n          <img\n            src={UnitLogoMap[unit.unit]}\n            alt={unit.unitName}\n            style={{ maxWidth: \"100%\" }}\n          ></img>\n        </div>\n        <Grid className={classes[\"grid-out\"]} container direction=\"column\">\n          <Grid\n            container\n            direction=\"row\"\n            wrap=\"nowrap\"\n            justify=\"space-between\"\n            alignItems=\"center\"\n          >\n            <Typography variant=\"subtitle1\" style={{ fontWeight: 600 }}>\n              {t(\"common:id\")}\n            </Typography>\n            <Typography>{unit.seq}</Typography>\n          </Grid>\n          <Divider style={{ margin: \"1% 0\" }} />\n          <Grid\n            container\n            direction=\"row\"\n            wrap=\"nowrap\"\n            justify=\"space-between\"\n            alignItems=\"center\"\n          >\n            <Grid item xs={2}>\n              <Typography variant=\"subtitle1\" style={{ fontWeight: 600 }}>\n                {t(\"unit:introduction\")}\n              </Typography>\n            </Grid>\n            <Grid item xs={6} md={8}>\n              <Grid container justify=\"flex-end\">\n                <ContentTrans\n                  mode={contentTransMode}\n                  contentKey={`unit_profile:${unit.unit}.profileSentence`}\n                  original={unit.profileSentence}\n                />\n              </Grid>\n            </Grid>\n          </Grid>\n          <Divider style={{ margin: \"1% 0\" }} />\n          <Grid\n            container\n            direction=\"row\"\n            wrap=\"nowrap\"\n            justify=\"space-between\"\n            alignItems=\"center\"\n          >\n            <Grid item>\n              <Typography variant=\"subtitle1\" style={{ fontWeight: 600 }}>\n                {t(\"unit:colorCode\")}\n              </Typography>\n            </Grid>\n            <Grid item>\n              <Grid container spacing={1}>\n                <Grid item>\n                  <Typography>{unit.colorCode}</Typography>\n                </Grid>\n                <Grid item>\n                  <ColorPreview colorCode={unit.colorCode} />\n                </Grid>\n              </Grid>\n            </Grid>\n          </Grid>\n          <Divider style={{ margin: \"1% 0\" }} />\n        </Grid>\n      </Container>\n      <Typography variant=\"h6\" className={layoutClasses.header}>\n        {t(\"common:character\", {\n          count: unitCharas.length,\n        })}\n      </Typography>\n      <Container className={layoutClasses.content} maxWidth=\"md\">\n        <Grid\n          className={classes[\"grid-out\"]}\n          container\n          direction=\"row\"\n          spacing={2}\n          justify=\"center\"\n        >\n          {unitCharas.map((uc) => (\n            <Fragment key={`chara-${uc.id}`}>\n              <Grid item xs={6} md={4} lg={3}>\n                <Link to={\"/chara/\" + uc.id} style={{ textDecoration: \"none\" }}>\n                  <Paper>\n                    <Grid container direction=\"column\" alignItems=\"center\">\n                      <Grid item>\n                        <Grid\n                          container\n                          justify=\"flex-end\"\n                          alignItems=\"flex-start\"\n                        >\n                          <img\n                            key={uc.id}\n                            height=\"84\"\n                            src={charaIcons[`CharaIcon${uc.id}`]}\n                            alt={getCharaName(uc.id)}\n                          ></img>\n                        </Grid>\n                      </Grid>\n                      <Grid item>\n                        <CharaNameTrans\n                          mode={contentTransMode}\n                          characterId={uc.id}\n                          originalProps={{\n                            variant: \"subtitle1\",\n                            style: { fontWeight: 600 },\n                            align: \"center\",\n                          }}\n                          translatedProps={{\n                            variant: \"subtitle2\",\n                            align: \"center\",\n                          }}\n                        />\n                      </Grid>\n                    </Grid>\n                  </Paper>\n                </Link>\n              </Grid>\n            </Fragment>\n          ))}\n        </Grid>\n      </Container>\n      <Typography variant=\"h6\" className={layoutClasses.header}>\n        {t(\"common:music\")}\n      </Typography>\n      <Container className={layoutClasses.content}>\n        <Grid\n          className={classes[\"grid-out\"]}\n          container\n          direction=\"row\"\n          spacing={2}\n          justify=\"center\"\n        >\n          {unitMusics.map((um) => (\n            <Fragment key={`music-${um.id}`}>\n              <Grid item xs={6} md={3} lg={2}>\n                <Link to={\"/music/\" + um.id} style={{ textDecoration: \"none\" }}>\n                  <Paper>\n                    <Grid\n                      container\n                      direction=\"column\"\n                      alignItems=\"center\"\n                      spacing={1}\n                    >\n                      <Grid item>\n                        <Grid\n                          container\n                          justify=\"flex-end\"\n                          alignItems=\"flex-start\"\n                        >\n                          <UnitMusicImage\n                            assetbundleName={um.assetbundleName}\n                            title={um.title}\n                            key={um.id}\n                          />\n                        </Grid>\n                      </Grid>\n                      <Grid item>\n                        <ContentTrans\n                          mode={contentTransMode}\n                          contentKey={`music_titles:${um.id}`}\n                          original={um.title}\n                          originalProps={{\n                            variant: \"subtitle1\",\n                            style: { fontWeight: 600 },\n                            align: \"center\",\n                          }}\n                          translatedProps={{\n                            variant: \"subtitle2\",\n                            align: \"center\",\n                          }}\n                        />\n                      </Grid>\n                    </Grid>\n                  </Paper>\n                </Link>\n              </Grid>\n            </Fragment>\n          ))}\n        </Grid>\n      </Container>\n    </Fragment>\n  ) : (\n    <div>\n      Loading... If you saw this for a while, unit {unitId} does not exist.\n    </div>\n  );\n};\n\nexport default UnitDetail;\n"],"sourceRoot":""}