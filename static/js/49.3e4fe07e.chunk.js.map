{"version":3,"sources":["styles/layout.ts","utils/apiClient.ts","components/comment/CommentBlock.tsx","components/comment/Comment.tsx","components/announcement/AnnouncementDetail.tsx"],"names":["useLayoutStyles","makeStyles","theme","header","fontWeight","content","marginTop","spacing","marginBottom","marginLeft","marginRight","alert","margin","bold","typography","fontWeightBold","avatarProfile","breakpoints","down","height","width","up","capitalize","textTransform","useStrapi","token","axios","useMemo","Axios","create","baseURL","process","interceptors","request","use","req","headers","authorization","response","res","err","data","message","id","messages","postLoginLocal","useCallback","values","a","post","postRegisterLocal","getRedirectConnectLoginUrl","service","getUri","url","getConnectCallback","provider","searchString","get","getUserMe","postUpload","formData","Object","assign","putUserMetadataMe","userMetaId","put","postForgotPassword","email","postResetPassword","code","password","passwordConfirmation","getSekaiProfileMe","postSekaiProfileVerify","userid","postSekaiProfileConfirm","putSekaiProfileUpdate","getLanguages","getUserMetadataMe","getSekaiCurrentEvent","getSekaiProfileEventRecordMe","eventId","params","postSekaiProfileEventRecord","getAnnouncements","_sort","getAnnouncementById","getAnnouncementPage","limit","page","_limit","_start","getAnnouncementCount","Number","getComments","contentType","postComment","userId","authorUser","related","refId","ref","field","getUserInfo","patchCommentLike","contentId","commentId","patch","postCommentAbuse","reason","CommentBlock","comment","onThumbsUp","onReport","mdParser","MarkdownIt","linkify","typographer","useState","user","setUser","points","setPoints","useEffect","isNaN","then","Grid","container","item","xs","justify","alignItems","Typography","color","variant","username","Date","created_at","toLocaleString","ButtonGroup","Button","onClick","ThumbUp","fontSize","Report","value","renderHTML","text","render","config","view","html","canView","Comment","comments","t","useTranslation","useContext","UserContext","jwtToken","MdEditor","Plugins","AutoResize","min","max","unuse","isCompose","setIsCompose","setContent","tmpComments","setTmpComments","isReportOpen","setIsReportOpen","reportContent","setReportContent","reportId","setReportId","reportReason","setReportReason","isReportSuccess","setIsReportSuccess","direction","menu","md","fullScreen","onChange","Box","length","map","comm","Divider","Dialog","open","onClose","DialogTitle","DialogContent","DialogContentText","FormControl","InputLabel","Select","ev","target","MenuItem","TextField","fullWidth","label","type","DialogActions","Snackbar","autoHideDuration","Alert","severity","AnnouncementDetail","layoutClasses","useParams","MarkdownItCollapsible","announcement","setAnnouncement","className","title","category","published_at","style","Container","maxWidth","filter","blocked"],"mappings":"8KAEMA,EAAkBC,aAAW,SAACC,GAAD,YAAY,CAC7CC,OAAQ,CACNC,WAAY,QAEdC,QAAS,CACPC,UAAWJ,EAAMK,QAAQ,GACzBC,aAAcN,EAAMK,QAAQ,GAC5BE,WAAY,OACZC,YAAa,QAEfC,MAAO,CACLC,OAAQV,EAAMK,QAAQ,EAAG,IAE3BM,KAAM,CACJT,WAAYF,EAAMY,WAAWC,gBAE/BC,eAAa,mBACVd,EAAMe,YAAYC,KAAK,MAAQ,CAC9BC,OAAQjB,EAAMK,QAAQ,IACtBa,MAAOlB,EAAMK,QAAQ,MAHZ,cAKVL,EAAMe,YAAYI,GAAG,MAAQ,CAC5BF,OAAQjB,EAAMK,QAAQ,IACtBa,MAAOlB,EAAMK,QAAQ,MAPZ,GAUbe,WAAY,CACVC,cAAe,mB,0HCTZ,SAASC,EAAUC,GACxB,IAAMC,EAAQC,mBAAQ,WACpB,IAAMD,EAAQE,IAAMC,OAAO,CACzBC,QAASC,8BAkBX,OAfAL,EAAMM,aAAaC,QAAQC,KAAI,SAACC,GAE9B,OADAV,IAAUU,EAAIC,QAAQC,cAAZ,iBAAsCZ,IACzCU,KAGTT,EAAMM,aAAaM,SAASJ,KAC1B,SAACK,GAAD,OAASA,KACT,SAACC,GAIC,MAHIA,EAAIF,SAASG,KAAKC,QACpBF,EAAIG,GAAKH,EAAIF,SAASG,KAAKC,QAAQ,GAAGE,SAAS,GAAGD,GAC/CH,EAAIG,GAAKH,EAAIE,QACZF,KAIHd,IACN,CAACD,IAEJ,MAAO,CACLoB,eAAgBC,sBAAW,uCACzB,WAAOC,GAAP,SAAAC,EAAA,sEACStB,EAAMuB,KAA0B,cAAeF,GADxD,uCACiEN,MADjE,2CADyB,sDAGzB,CAACf,IAEHwB,kBAAmBJ,sBAAW,uCAC5B,WAAOC,GAAP,SAAAC,EAAA,sEACStB,EAAMuB,KAA0B,uBAAwBF,GADjE,uCAEKN,MAFL,2CAD4B,sDAI5B,CAACf,IAEHyB,2BAA4BL,uBAC1B,SAACM,GAAD,gBACK1B,EAAM2B,OAAO,CACdC,IAAI,GAAD,OAAKvB,4BAAL,oBAAkDqB,QAEzD,CAAC1B,IAEH6B,mBAAoBT,sBAAW,uCAC7B,WACEU,EACAC,GAFF,SAAAT,EAAA,sEAKUtB,EAAMgC,IAAN,gBACKF,EADL,oBACyBC,IANnC,uCAQIhB,MARJ,2CAD6B,wDAU7B,CAACf,IAEHiC,UAAWb,sBAAW,uCACpB,WAAOrB,GAAP,SAAAuB,EAAA,sEAEUtB,EAAMgC,IACV,YACAjC,EACI,CACEW,QAAS,CAAEC,cAAc,UAAD,OAAYZ,KAEtC,IARV,uCAUIgB,MAVJ,2CADoB,sDAYpB,CAACf,IAEHkC,WAAYd,sBAAW,uCACrB,WAAOe,EAAoBpC,GAA3B,SAAAuB,EAAA,sEAEUtB,EAAMuB,KAAK,UAAWY,EAAU,CACpCzB,QAAS0B,OAAOC,OACd,CACE,eAAgB,uBAElBtC,EACI,CACEY,cAAc,UAAD,OAAYZ,IAE3B,MAXZ,uCAcIgB,MAdJ,2CADqB,wDAgBrB,CAACf,IAEHsC,kBAAmBlB,sBAAW,uCAC5B,WACEmB,EACAxB,GAFF,SAAAO,EAAA,sEAIStB,EAAMwC,IAAwB,oBAAqBzB,GAJ5D,uCAImEA,MAJnE,2CAD4B,wDAM5B,CAACf,IAEHyC,mBAAoBrB,sBAAW,uCAC7B,WAAOsB,GAAP,SAAApB,EAAA,sEAEUtB,EAAMuB,KAAN,wBAAoC,CACxCmB,UAHN,uCAKI3B,MALJ,2CAD6B,sDAO7B,CAACf,IAEH2C,kBAAmBvB,sBAAW,uCAC5B,WAAOwB,EAAcC,EAAkBC,GAAvC,SAAAxB,EAAA,sEAEUtB,EAAMuB,KAAN,uBAAmC,CACvCqB,OACAC,WACAC,yBALN,uCAOI/B,MAPJ,2CAD4B,0DAS5B,CAACf,IAEH+C,kBAAmB3B,sBAAW,uCAC5B,WAAOrB,GAAP,SAAAuB,EAAA,sEAEUtB,EAAMgC,IACV,qBACAjC,EACI,CACEW,QAAS,CAAEC,cAAc,UAAD,OAAYZ,KAEtC,IARV,uCAUIgB,MAVJ,2CAD4B,sDAY5B,CAACf,IAEHgD,uBAAwB5B,sBAAW,uCACjC,WACE6B,GADF,SAAA3B,EAAA,sEAOUtB,EAAMuB,KAGT,yBAA0B,CAC3B0B,WAXN,uCAaIlC,MAbJ,2CADiC,sDAejC,CAACf,IAEHkD,wBAAyB9B,sBAAW,uCAClC,WAAOH,EAAYgC,GAAnB,SAAA3B,EAAA,sEAEUtB,EAAMuB,KAAN,0BACeN,EADf,YAEJ,CACEgC,WALR,uCAQIlC,MARJ,2CADkC,wDAUlC,CAACf,IAEHmD,sBAAuB/B,sBAAW,uCAChC,WAAOH,GAAP,SAAAK,EAAA,sEAEUtB,EAAMwC,IAAN,0BACevB,EADf,YAFV,uCAKIF,MALJ,2CADgC,sDAOhC,CAACf,IAEHoD,aAAchC,sBAAW,sBACvB,sBAAAE,EAAA,sEACStB,EAAMgC,IAAqB,cADpC,uCACmDjB,MADnD,2CAEA,CAACf,IAEHqD,kBAAmBjC,sBAAW,uCAC5B,WAAOrB,GAAP,SAAAuB,EAAA,sEAEUtB,EAAMgC,IACV,oBACAjC,EACI,CACEW,QAAS,CAAEC,cAAc,UAAD,OAAYZ,KAEtC,IARV,uCAUIgB,MAVJ,2CAD4B,sDAY5B,CAACf,IAEHsD,qBAAsBlC,sBAAW,sBAC/B,sBAAAE,EAAA,sEACStB,EAAMgC,IAA4B,wBAD3C,uCACoEjB,MADpE,2CAEA,CAACf,IAEHuD,6BAA8BnC,sBAAW,uCACvC,WAAOoC,GAAP,SAAAlC,EAAA,sEAEUtB,EAAMgC,IACV,kCACA,CACEyB,OAAQD,EACJ,CACEA,WAEF,KATZ,uCAYIzC,MAZJ,2CADuC,sDAcvC,CAACf,IAEH0D,4BAA6BtC,sBAAW,uCACtC,WAAOoC,GAAP,SAAAlC,EAAA,sEACStB,EAAMuB,KAAK,sCAAuC,CAAEiC,YAD7D,uCAEKzC,MAFL,2CADsC,sDAItC,CAACf,IAEH2D,iBAAkBvC,sBAAW,sBAC3B,sBAAAE,EAAA,sEAEUtB,EAAMgC,IAAyB,kBAAmB,CACtDyB,OAAQ,CACNG,MAAO,gBAJf,uCAOI7C,MAPJ,2CAQA,CAACf,IAEH6D,oBAAqBzC,sBAAW,uCAC9B,WAAOH,GAAP,SAAAK,EAAA,sEACStB,EAAMgC,IAAN,yBAA+Cf,IADxD,uCAC+DF,MAD/D,2CAD8B,sDAG9B,CAACf,IAEH8D,oBAAqB1C,sBAAW,sBAC9B,0CAAAE,EAAA,6DAAOyC,EAAP,+BAAuB,GAAIC,EAA3B,+BAA0C,EAA1C,SAEUhE,EAAMgC,IAAyB,iBAAkB,CACrDyB,OAAQ,CACNQ,OAAQF,EACRG,OAAQF,EAAOD,EACfH,MAAO,gBANf,uCASI7C,MATJ,2CAUA,CAACf,IAEHmE,qBAAsB/C,sBAAW,sBAC/B,sBAAAE,EAAA,kEAAY8C,OAAZ,SAA0BpE,EAAMgC,IAAI,wBAApC,0BAA6DjB,KAA7D,6EACA,CAACf,IAEHqE,YAAajD,sBAAW,uCACtB,WAAOkD,EAAqBrD,GAA5B,SAAAK,EAAA,sEACStB,EAAMgC,IAAN,oBAAuBsC,EAAvB,YAAsCrD,IAD/C,uCACsDF,MADtD,2CADsB,wDAGtB,CAACf,IAEHuE,YAAanD,sBAAW,uCACtB,WACEkD,EACArD,EACAuD,EACA7F,GAJF,SAAA2C,EAAA,sEAOUtB,EAAMuB,KAAN,oBAAwB+C,EAAxB,YAAuCrD,GAAM,CACjDwD,WAAYD,EACZ7F,UACA+F,QAAS,CACP,CACEC,MAAO1D,EACP2D,IAAKN,EACLO,MAAO,eAdjB,uCAkBI9D,MAlBJ,2CADsB,4DAoBtB,CAACf,IAEH8E,YAAa1D,sBAAW,uCACtB,WAAOH,GAAP,SAAAK,EAAA,sEACStB,EAAMgC,IAAN,iBAA+Bf,IADxC,uCAC+CF,MAD/C,2CADsB,sDAGtB,CAACf,IAEH+E,iBAAkB3D,sBAAW,uCAC3B,WACEkD,EACAU,EACAC,GAHF,SAAA3D,EAAA,sEAMUtB,EAAMkF,MAAN,oBACSZ,EADT,YACwBU,EADxB,oBAC6CC,EAD7C,UANV,uCASIlE,MATJ,2CAD2B,0DAW3B,CAACf,IAEHmF,iBAAkB/D,sBAAW,uCAC3B,WACEkD,EACAU,EACAC,EACAG,EACAzG,GALF,SAAA2C,EAAA,sEAQUtB,EAAMuB,KAAN,oBACS+C,EADT,YACwBU,EADxB,oBAC6CC,EAD7C,iBAEJ,CACEG,SACAzG,YAZR,uCAeIoC,MAfJ,2CAD2B,8DAiB3B,CAACf,O,sZClPQqF,EAzEV,SAAC,GAAuC,IAArCC,EAAoC,EAApCA,QAASC,EAA2B,EAA3BA,WAAYC,EAAe,EAAfA,SACnBV,EAAgBhF,cAAhBgF,YAGFW,EAAWxF,mBACf,kBAAM,IAAIyF,IAAW,CAAEC,SAAS,EAAMC,aAAa,MACnD,IANwC,EASlBC,qBATkB,mBASnCC,EATmC,KAS7BC,EAT6B,OAUdF,mBAASP,EAAQU,QAAU,GAVb,mBAUnCA,EAVmC,KAU3BC,EAV2B,KAmB1C,OAPAC,qBAAU,WACRpB,EAEEqB,MAAMb,EAAQb,YAAca,EAAQb,WAAWxD,GAAKqE,EAAQb,YAC5D2B,KAAKL,KACN,CAACT,EAAQb,WAAYK,IAGtB,kBAACuB,EAAA,EAAD,CAAMC,WAAS,EAACzH,QAAS,GACvB,kBAACwH,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIF,WAAS,EAACG,QAAQ,gBAAgBC,WAAW,UAC9D,kBAACL,EAAA,EAAD,CAAME,MAAI,GACR,kBAACF,EAAA,EAAD,CAAMC,WAAS,EAACzH,QAAS,GACvB,kBAACwH,EAAA,EAAD,CAAME,MAAI,GACR,kBAACI,EAAA,EAAD,CAAYC,MAAM,gBAAgBC,QAAQ,aAA1C,OACGf,QADH,IACGA,OADH,EACGA,EAAMgB,WAGX,kBAACT,EAAA,EAAD,CAAME,MAAI,GACR,kBAACI,EAAA,EAAD,CAAYE,QAAQ,aACjB,IAAIE,KAAKzB,EAAQ0B,YAAYC,qBAKtC,kBAACZ,EAAA,EAAD,CAAME,MAAI,GACR,kBAACW,EAAA,EAAD,OACK3B,GACD,kBAAC4B,EAAA,EAAD,CACEC,QAAO,sBAAE,sBAAA9F,EAAA,sEACDiE,EAAWD,EAAQrE,IADlB,OAEPgF,EAAUD,EAAS,GAFZ,4CAKT,kBAACqB,EAAA,EAAD,CAASC,SAAS,YANpB,IAMkCtB,KAGjCR,GACD,kBAAC2B,EAAA,EAAD,CACEC,QAAO,sBAAE,sBAAA9F,EAAA,sEACDkE,EAASF,EAAQrE,IADhB,4CAIT,kBAACsG,EAAA,EAAD,CAAQD,SAAS,gBAM3B,kBAACjB,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,IACb,kBAACG,EAAA,EAAD,KACE,kBAAC,IAAD,CACEa,MAAOlC,EAAQ3G,QACf8I,WAAY,SAACC,GAAD,OAAUjC,EAASkC,OAAOD,IACtCE,OAAQ,CAAEC,KAAM,CAAEC,MAAM,GAAQC,QAAS,CAAED,MAAM,U,kBCgJ9CE,EAxLV,SAAC,GAA0C,IAAxCC,EAAuC,EAAvCA,SAAUjD,EAA6B,EAA7BA,UAAWV,EAAkB,EAAlBA,YACnB4D,EAAMC,cAAND,EADqC,EAElBE,qBAAWC,KAA9BvC,EAFqC,EAErCA,KAAMwC,EAF+B,EAE/BA,SAF+B,EAGHxI,YAAUwI,GAA5C/D,EAHqC,EAGrCA,YAAaY,EAHwB,EAGxBA,iBAEfM,EAAWxF,mBACf,kBAAM,IAAIyF,IAAW,CAAEC,SAAS,EAAMC,aAAa,MACnD,IAGFM,qBAAU,WAKR,OAJAqC,IAAS/H,IAAIgI,UAAQC,WAAY,CAC/BC,IAAK,IACLC,IAAK,MAEA,WACLJ,IAASK,MAAMJ,UAAQC,eAExB,IAlB0C,MAoBX5C,oBAAS,GApBE,mBAoBtCgD,EApBsC,KAoB3BC,EApB2B,OAqBfjD,mBAAS,IArBM,mBAqBtClH,EArBsC,KAqB7BoK,EArB6B,OAsBPlD,mBAAyBoC,GAtBlB,mBAsBtCe,EAtBsC,KAsBzBC,EAtByB,QAuBLpD,oBAAS,GAvBJ,qBAuBtCqD,GAvBsC,MAuBxBC,GAvBwB,SAwBHtD,mBAAS,IAxBN,qBAwBtCuD,GAxBsC,MAwBvBC,GAxBuB,SAyBbxD,mBAAS,GAzBI,qBAyBtCyD,GAzBsC,MAyB5BC,GAzB4B,SA0BL1D,mBAA6B,SA1BxB,qBA0BtC2D,GA1BsC,MA0BxBC,GA1BwB,SA2BC5D,oBAAS,GA3BV,qBA2BtC6D,GA3BsC,MA2BrBC,GA3BqB,MA6B7C,OACE,kBAACtD,EAAA,EAAD,CAAMC,WAAS,EAACzH,QAAS,GACtBiH,GACC,kBAACO,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,IACZqC,EACC,kBAACxC,EAAA,EAAD,CAAMC,WAAS,EAACsD,UAAU,SAAS/K,QAAS,GAC1C,kBAACwH,EAAA,EAAD,CAAME,MAAI,GACR,kBAAC,IAAD,CACEiB,MAAO7I,EACPiJ,OAAQ,CACNC,KAAM,CAAEgC,MAAM,EAAMC,IAAI,GACxB/B,QAAS,CAAEgC,YAAY,IAEzBtC,WAAY,SAACC,GAAD,OAAUjC,EAASkC,OAAOD,IACtCsC,SAAU,gBAAGtC,EAAH,EAAGA,KAAH,OAAcqB,EAAWrB,OAGvC,kBAACrB,EAAA,EAAD,CAAME,MAAI,GACR,kBAACY,EAAA,EAAD,CACEN,QAAQ,WACRO,QAAO,sBAAE,4BAAA9F,EAAA,sEACYiD,EACjBD,EACAU,EACAc,EAAK7E,GACLtC,GALK,OACDoC,EADC,OAOPkI,EAAe,GAAD,mBAAKD,GAAL,CAAkBjI,KAChC+H,GAAa,GARN,4CAWRZ,EAAE,mBAKT,kBAACf,EAAA,EAAD,CAAQN,QAAQ,WAAWO,QAAS,kBAAM0B,GAAa,KACpDZ,EAAE,mBAKX,kBAAC7B,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,IACb,kBAACyD,EAAA,EAAD,CAAK/K,OAAO,UAEb8J,EAAYkB,OACXlB,EAAYmB,KAAI,SAACC,GAAD,OACd,kBAAC,WAAD,KACE,kBAAC/D,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,IACb,kBAAC,EAAD,CACElB,QAAS8E,EAIT5E,SAAQ,uCAAE,WAAOvE,GAAP,SAAAK,EAAA,sDACR6H,IAAgB,GAChBI,GAAYtI,GAFJ,2CAAF,yDAMZ,kBAACoF,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,IACb,kBAAC6D,EAAA,EAAD,WAKN,kBAAC1D,EAAA,EAAD,KAAauB,EAAE,2BAEjB,kBAACoC,EAAA,EAAD,CACEC,KAAMrB,GACNsB,QAAS,WACPrB,IAAgB,GAChBE,GAAiB,IACjBE,GAAY,KAGd,kBAACkB,EAAA,EAAD,KAAcvC,EAAE,+BAChB,kBAACwC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACGzC,EAAE,qCAEL,kBAAC0C,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KAAa3C,EAAE,sCACf,kBAAC4C,EAAA,EAAD,CACEtD,MAAOgC,GACPQ,SAAU,SAACe,GAAD,OACRtB,GAAgBsB,EAAGC,OAAOxD,SAG5B,kBAACyD,EAAA,EAAD,CAAUzD,MAAM,SACbU,EAAE,sCAEL,kBAAC+C,EAAA,EAAD,CAAUzD,MAAM,aACbU,EAAE,0CAEL,kBAAC+C,EAAA,EAAD,CAAUzD,MAAM,kBACbU,EAAE,iDAIT,kBAACgD,EAAA,EAAD,CACEC,WAAS,EACT3D,MAAO4B,GACPlK,OAAO,QACPkM,MAAOlD,EAAE,gCACTmD,KAAK,OACLrB,SAAU,SAACe,GAAD,OAAQ1B,GAAiB0B,EAAGC,OAAOxD,WAGjD,kBAAC8D,EAAA,EAAD,KACE,kBAACnE,EAAA,EAAD,CACEC,QAAO,sBAAE,sBAAA9F,EAAA,sEACD6D,EACJb,EACAU,EACAsE,GACAE,GACAJ,IANK,OAePO,IAAmB,GACnBR,IAAgB,GAhBT,2CAkBTvC,MAAM,WAELsB,EAAE,oBAIT,kBAACqD,EAAA,EAAD,CACEhB,KAAMb,GACN8B,iBAAkB,IAClBhB,QAAS,WACPb,IAAmB,KAGrB,kBAAC8B,EAAA,EAAD,CACEjB,QAAS,WACPb,IAAmB,IAErB+B,SAAS,WAERxD,EAAE,oC,QClIEyD,UAtE0B,WACvC,IAAMC,EAAgBtN,cACd2C,EAAO4K,cAAP5K,GACA4C,EAAwB/D,cAAxB+D,oBACAqE,EAAMC,cAAND,EAEFzC,EAAWxF,mBACf,kBACE,IAAIyF,IAAW,CAAEC,SAAS,EAAMC,aAAa,IAAQpF,IACnDsL,OAEJ,IAX2C,EAcLjG,qBAdK,mBActCkG,EAdsC,KAcxBC,EAdwB,KAoB7C,OAJA9F,qBAAU,WACRrC,EAAoB5C,GAAImF,KAAK4F,KAC5B,CAACnI,EAAqB5C,IAEhB8K,EACP,kBAAC,WAAD,KACE,kBAACpF,EAAA,EAAD,CAAYE,QAAQ,KAAKoF,UAAWL,EAAcnN,QAC/CsN,EAAaG,OAEhB,kBAAC7F,EAAA,EAAD,CAAMC,WAAS,EAACzH,QAAS,GACvB,kBAACwH,EAAA,EAAD,CAAME,MAAI,GACR,kBAACI,EAAA,EAAD,CAAYE,QAAQ,YAAYD,MAAM,iBACnCsB,EAAE,yBADL,IACgC,IAC7BA,EAAE,6BAAD,OAA8B6D,EAAaI,aAGjD,kBAAC9F,EAAA,EAAD,CAAME,MAAI,GACR,kBAACI,EAAA,EAAD,CAAYE,QAAQ,YAAYD,MAAM,iBACnCsB,EAAE,uBADL,KAC+B6D,EAAajG,KAAKgB,WAGnD,kBAACT,EAAA,EAAD,CAAME,MAAI,GACR,kBAACI,EAAA,EAAD,CAAYE,QAAQ,YAAYD,MAAM,iBACnCsB,EAAE,6BADL,IACoC,IACjC,IAAInB,KAAKgF,EAAaK,cAAcnF,oBAI3C,kBAACoD,EAAA,EAAD,CAASgC,MAAO,CAAEnN,OAAQ,UAC1B,kBAACoN,EAAA,EAAD,CAAWL,UAAWL,EAAcjN,SAClC,kBAAC,IAAD,CACE6I,MAAOuE,EAAapN,QACpB8I,WAAY,SAACC,GAAD,OAAUjC,EAASkC,OAAOD,IACtCE,OAAQ,CAAEC,KAAM,CAAEC,MAAM,GAAQC,QAAS,CAAED,MAAM,OAGrD,kBAACnB,EAAA,EAAD,CAAYE,QAAQ,KAAKoF,UAAWL,EAAcnN,QAC/CyJ,EAAE,kBADL,IACwB,kBAAC,IAAD,OAExB,kBAACoE,EAAA,EAAD,CAAWL,UAAWL,EAAcjN,QAAS4N,SAAS,MACpD,kBAAC,EAAD,CACEtE,SAAU8D,EAAa9D,SAASuE,QAAO,SAACpC,GAAD,OAAWA,EAAKqC,WACvDnI,YAAY,eACZU,UAAWZ,OAAOnD,OAKxB,kBAAC0F,EAAA,EAAD,CAAYE,QAAQ,KAAKoF,UAAWL,EAAcnN,QAAlD","file":"static/js/49.3e4fe07e.chunk.js","sourcesContent":["import { makeStyles } from \"@material-ui/core\";\n\nconst useLayoutStyles = makeStyles((theme) => ({\n  header: {\n    fontWeight: \"bold\",\n  },\n  content: {\n    marginTop: theme.spacing(3),\n    marginBottom: theme.spacing(3),\n    marginLeft: \"auto\",\n    marginRight: \"auto\",\n  },\n  alert: {\n    margin: theme.spacing(1, 0),\n  },\n  bold: {\n    fontWeight: theme.typography.fontWeightBold,\n  },\n  avatarProfile: {\n    [theme.breakpoints.down(\"sm\")]: {\n      height: theme.spacing(10),\n      width: theme.spacing(10),\n    },\n    [theme.breakpoints.up(\"md\")]: {\n      height: theme.spacing(20),\n      width: theme.spacing(20),\n    },\n  },\n  capitalize: {\n    textTransform: \"capitalize\",\n  },\n}));\n\nexport { useLayoutStyles };\n","import { CommentAbuseReason, CommentModel } from \"./../strapi-model.d\";\nimport Axios from \"axios\";\nimport { useCallback, useMemo } from \"react\";\nimport {\n  AnnouncementModel,\n  LanguageModel,\n  LoginLocalApiReturn,\n  LoginValues,\n  RegisterValues,\n  SekaiCurrentEventModel,\n  SekaiProfileEventRecordModel,\n  SekaiProfileModel,\n  UserMetadatumModel,\n  UserModel,\n} from \"../strapi-model\";\nimport { IUserProfile } from \"../types\";\n\n/**\n * Access Strapi endpoints.\n */\nexport function useStrapi(token?: string) {\n  const axios = useMemo(() => {\n    const axios = Axios.create({\n      baseURL: process.env.REACT_APP_STRAPI_BASE,\n    });\n\n    axios.interceptors.request.use((req) => {\n      token && (req.headers.authorization = `Bearer ${token}`);\n      return req;\n    });\n\n    axios.interceptors.response.use(\n      (res) => res,\n      (err) => {\n        if (err.response.data.message)\n          err.id = err.response.data.message[0].messages[0].id;\n        else err.id = err.message;\n        throw err;\n      }\n    );\n\n    return axios;\n  }, [token]);\n\n  return {\n    postLoginLocal: useCallback(\n      async (values: LoginValues): Promise<LoginLocalApiReturn> =>\n        (await axios.post<LoginLocalApiReturn>(\"/auth/local\", values)).data,\n      [axios]\n    ),\n    postRegisterLocal: useCallback(\n      async (values: RegisterValues): Promise<LoginLocalApiReturn> =>\n        (await axios.post<LoginLocalApiReturn>(\"/auth/local/register\", values))\n          .data,\n      [axios]\n    ),\n    getRedirectConnectLoginUrl: useCallback(\n      (service: string) =>\n        `${axios.getUri({\n          url: `${process.env.REACT_APP_STRAPI_BASE}/connect/${service}`,\n        })}`,\n      [axios]\n    ),\n    getConnectCallback: useCallback(\n      async (\n        provider: string,\n        searchString: string\n      ): Promise<LoginLocalApiReturn> =>\n        (\n          await axios.get<LoginLocalApiReturn>(\n            `/auth/${provider}/callback${searchString}`\n          )\n        ).data,\n      [axios]\n    ),\n    getUserMe: useCallback(\n      async (token?: string): Promise<UserModel> =>\n        (\n          await axios.get<UserModel>(\n            \"/users/me\",\n            token\n              ? {\n                  headers: { authorization: `Bearer ${token}` },\n                }\n              : {}\n          )\n        ).data,\n      [axios]\n    ),\n    postUpload: useCallback(\n      async (formData: FormData, token?: string) =>\n        (\n          await axios.post(\"/upload\", formData, {\n            headers: Object.assign(\n              {\n                \"Content-Type\": \"multipart/form-data\",\n              },\n              token\n                ? {\n                    authorization: `Bearer ${token}`,\n                  }\n                : {}\n            ),\n          })\n        ).data,\n      [axios]\n    ),\n    putUserMetadataMe: useCallback(\n      async (\n        userMetaId: number,\n        data: Partial<UserMetadatumModel>\n      ): Promise<UserMetadatumModel> =>\n        (await axios.put<UserMetadatumModel>(\"/user-metadata/me\", data)).data,\n      [axios]\n    ),\n    postForgotPassword: useCallback(\n      async (email: string) =>\n        (\n          await axios.post(`/auth/forgot-password`, {\n            email,\n          })\n        ).data,\n      [axios]\n    ),\n    postResetPassword: useCallback(\n      async (code: string, password: string, passwordConfirmation: string) =>\n        (\n          await axios.post(`/auth/reset-password`, {\n            code,\n            password,\n            passwordConfirmation,\n          })\n        ).data,\n      [axios]\n    ),\n    getSekaiProfileMe: useCallback(\n      async (token?: string): Promise<SekaiProfileModel> =>\n        (\n          await axios.get<SekaiProfileModel>(\n            \"/sekai-profiles/me\",\n            token\n              ? {\n                  headers: { authorization: `Bearer ${token}` },\n                }\n              : {}\n          )\n        ).data,\n      [axios]\n    ),\n    postSekaiProfileVerify: useCallback(\n      async (\n        userid: string\n      ): Promise<{\n        id: number;\n        token: string;\n      }> =>\n        (\n          await axios.post<{\n            id: number;\n            token: string;\n          }>(\"/sekai-profiles/verify\", {\n            userid,\n          })\n        ).data,\n      [axios]\n    ),\n    postSekaiProfileConfirm: useCallback(\n      async (id: number, userid: string): Promise<{ profile: IUserProfile }> =>\n        (\n          await axios.post<{ profile: IUserProfile }>(\n            `/sekai-profiles/${id}/confirm`,\n            {\n              userid,\n            }\n          )\n        ).data,\n      [axios]\n    ),\n    putSekaiProfileUpdate: useCallback(\n      async (id: number): Promise<{ profile: IUserProfile }> =>\n        (\n          await axios.put<{ profile: IUserProfile }>(\n            `/sekai-profiles/${id}/update`\n          )\n        ).data,\n      [axios]\n    ),\n    getLanguages: useCallback(\n      async (): Promise<LanguageModel[]> =>\n        (await axios.get<LanguageModel[]>(\"/languages\")).data,\n      [axios]\n    ),\n    getUserMetadataMe: useCallback(\n      async (token?: string): Promise<UserMetadatumModel> =>\n        (\n          await axios.get<UserMetadatumModel>(\n            \"/user-metadata/me\",\n            token\n              ? {\n                  headers: { authorization: `Bearer ${token}` },\n                }\n              : {}\n          )\n        ).data,\n      [axios]\n    ),\n    getSekaiCurrentEvent: useCallback(\n      async (): Promise<SekaiCurrentEventModel> =>\n        (await axios.get<SekaiCurrentEventModel>(\"/sekai-current-event\")).data,\n      [axios]\n    ),\n    getSekaiProfileEventRecordMe: useCallback(\n      async (eventId?: number): Promise<SekaiProfileEventRecordModel[]> =>\n        (\n          await axios.get<SekaiProfileEventRecordModel[]>(\n            \"/sekai-profile-event-records/me\",\n            {\n              params: eventId\n                ? {\n                    eventId,\n                  }\n                : {},\n            }\n          )\n        ).data,\n      [axios]\n    ),\n    postSekaiProfileEventRecord: useCallback(\n      async (eventId: number) =>\n        (await axios.post(\"/sekai-profile-event-records/record\", { eventId }))\n          .data,\n      [axios]\n    ),\n    getAnnouncements: useCallback(\n      async () =>\n        (\n          await axios.get<AnnouncementModel[]>(\"/announcements?\", {\n            params: {\n              _sort: \"isPin:DESC\",\n            },\n          })\n        ).data,\n      [axios]\n    ),\n    getAnnouncementById: useCallback(\n      async (id: string) =>\n        (await axios.get<AnnouncementModel>(`/announcements/${id}`)).data,\n      [axios]\n    ),\n    getAnnouncementPage: useCallback(\n      async (limit: number = 30, page: number = 0) =>\n        (\n          await axios.get<AnnouncementModel[]>(\"/announcements\", {\n            params: {\n              _limit: limit,\n              _start: page * limit,\n              _sort: \"isPin:DESC\",\n            },\n          })\n        ).data,\n      [axios]\n    ),\n    getAnnouncementCount: useCallback(\n      async () => Number((await axios.get(\"/announcements/count\")).data),\n      [axios]\n    ),\n    getComments: useCallback(\n      async (contentType: string, id: string | number) =>\n        (await axios.get(`/comments/${contentType}:${id}`)).data,\n      [axios]\n    ),\n    postComment: useCallback(\n      async (\n        contentType: string,\n        id: string | number,\n        userId: number,\n        content: string\n      ) =>\n        (\n          await axios.post(`/comments/${contentType}:${id}`, {\n            authorUser: userId,\n            content,\n            related: [\n              {\n                refId: id,\n                ref: contentType,\n                field: \"comments\",\n              },\n            ],\n          })\n        ).data,\n      [axios]\n    ),\n    getUserInfo: useCallback(\n      async (id: string | number) =>\n        (await axios.get<UserModel>(`/users/${id}`)).data,\n      [axios]\n    ),\n    patchCommentLike: useCallback(\n      async (\n        contentType: string,\n        contentId: string | number,\n        commentId: string | number\n      ) =>\n        (\n          await axios.patch<CommentModel>(\n            `/comments/${contentType}:${contentId}/comment/${commentId}/like`\n          )\n        ).data,\n      [axios]\n    ),\n    postCommentAbuse: useCallback(\n      async (\n        contentType: string,\n        contentId: string | number,\n        commentId: string | number,\n        reason: CommentAbuseReason,\n        content: string\n      ) =>\n        (\n          await axios.post(\n            `/comments/${contentType}:${contentId}/comment/${commentId}/report-abuse`,\n            {\n              reason,\n              content,\n            }\n          )\n        ).data,\n      [axios]\n    ),\n  };\n}\n\n/**\n * Access api.sekai.best endpoints.\n */\n// export function useApi() {\n//   const axios = Axios.create({\n//     baseURL: process.env.REACT_APP_API_BACKEND_BASE,\n//   });\n// }\n","import { Button, ButtonGroup, Grid, Typography } from \"@material-ui/core\";\nimport { Report, ThumbUp } from \"@material-ui/icons\";\nimport MarkdownIt from \"markdown-it\";\nimport React, { useEffect, useMemo, useState } from \"react\";\n// import { useTranslation } from \"react-i18next\";\nimport MdEditor from \"react-markdown-editor-lite\";\nimport { CommentModel, UserModel } from \"../../strapi-model\";\nimport { useStrapi } from \"../../utils/apiClient\";\n\nconst CommentBlock: React.FC<{\n  comment: CommentModel;\n  onThumbsUp?: (id: number) => Promise<void>;\n  onReport?: (id: number) => Promise<void>;\n}> = ({ comment, onThumbsUp, onReport }) => {\n  const { getUserInfo } = useStrapi();\n  // const { t } = useTranslation();\n\n  const mdParser = useMemo(\n    () => new MarkdownIt({ linkify: true, typographer: true }),\n    []\n  );\n\n  const [user, setUser] = useState<UserModel>();\n  const [points, setPoints] = useState(comment.points || 0);\n\n  useEffect(() => {\n    getUserInfo(\n      // @ts-ignore\n      isNaN(comment.authorUser) ? comment.authorUser.id : comment.authorUser\n    ).then(setUser);\n  }, [comment.authorUser, getUserInfo]);\n\n  return (\n    <Grid container spacing={1}>\n      <Grid item xs={12} container justify=\"space-between\" alignItems=\"center\">\n        <Grid item>\n          <Grid container spacing={1}>\n            <Grid item>\n              <Typography color=\"textSecondary\" variant=\"subtitle2\">\n                {user?.username}\n              </Typography>\n            </Grid>\n            <Grid item>\n              <Typography variant=\"subtitle2\">\n                {new Date(comment.created_at).toLocaleString()}\n              </Typography>\n            </Grid>\n          </Grid>\n        </Grid>\n        <Grid item>\n          <ButtonGroup>\n            {!!onThumbsUp && (\n              <Button\n                onClick={async () => {\n                  await onThumbsUp(comment.id);\n                  setPoints(points + 1);\n                }}\n              >\n                <ThumbUp fontSize=\"inherit\" /> {points}\n              </Button>\n            )}\n            {!!onReport && (\n              <Button\n                onClick={async () => {\n                  await onReport(comment.id);\n                }}\n              >\n                <Report fontSize=\"inherit\" />\n              </Button>\n            )}\n          </ButtonGroup>\n        </Grid>\n      </Grid>\n      <Grid item xs={12}>\n        <Typography>\n          <MdEditor\n            value={comment.content}\n            renderHTML={(text) => mdParser.render(text)}\n            config={{ view: { html: true }, canView: { html: true } }}\n          />\n        </Typography>\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default CommentBlock;\n","import {\n  Box,\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogContentText,\n  DialogTitle,\n  Divider,\n  FormControl,\n  Grid,\n  InputLabel,\n  MenuItem,\n  Select,\n  Snackbar,\n  TextField,\n  Typography,\n} from \"@material-ui/core\";\nimport MarkdownIt from \"markdown-it\";\nimport React, {\n  Fragment,\n  useContext,\n  useEffect,\n  useMemo,\n  useState,\n} from \"react\";\nimport MdEditor, { Plugins } from \"react-markdown-editor-lite\";\nimport { useTranslation } from \"react-i18next\";\nimport { CommentAbuseReason, CommentModel } from \"../../strapi-model\";\nimport { useStrapi } from \"../../utils/apiClient\";\nimport CommentBlock from \"./CommentBlock\";\nimport { UserContext } from \"../../context\";\nimport { Alert } from \"@material-ui/lab\";\n\nconst Comment: React.FC<{\n  comments: CommentModel[];\n  contentType: string;\n  contentId: string | number;\n}> = ({ comments, contentId, contentType }) => {\n  const { t } = useTranslation();\n  const { user, jwtToken } = useContext(UserContext)!;\n  const { postComment, postCommentAbuse } = useStrapi(jwtToken);\n\n  const mdParser = useMemo(\n    () => new MarkdownIt({ linkify: true, typographer: true }),\n    []\n  );\n\n  useEffect(() => {\n    MdEditor.use(Plugins.AutoResize, {\n      min: 150,\n      max: 300,\n    });\n    return () => {\n      MdEditor.unuse(Plugins.AutoResize);\n    };\n  }, []);\n\n  const [isCompose, setIsCompose] = useState(false);\n  const [content, setContent] = useState(\"\");\n  const [tmpComments, setTmpComments] = useState<CommentModel[]>(comments);\n  const [isReportOpen, setIsReportOpen] = useState(false);\n  const [reportContent, setReportContent] = useState(\"\");\n  const [reportId, setReportId] = useState(0);\n  const [reportReason, setReportReason] = useState<CommentAbuseReason>(\"OTHER\");\n  const [isReportSuccess, setIsReportSuccess] = useState(false);\n\n  return (\n    <Grid container spacing={1}>\n      {user && (\n        <Grid item xs={12}>\n          {isCompose ? (\n            <Grid container direction=\"column\" spacing={1}>\n              <Grid item>\n                <MdEditor\n                  value={content}\n                  config={{\n                    view: { menu: true, md: true },\n                    canView: { fullScreen: false },\n                  }}\n                  renderHTML={(text) => mdParser.render(text)}\n                  onChange={({ text }) => setContent(text)}\n                />\n              </Grid>\n              <Grid item>\n                <Button\n                  variant=\"outlined\"\n                  onClick={async () => {\n                    const data = await postComment(\n                      contentType,\n                      contentId,\n                      user.id,\n                      content\n                    );\n                    setTmpComments([...tmpComments, data]);\n                    setIsCompose(false);\n                  }}\n                >\n                  {t(\"comment:send\")}\n                </Button>\n              </Grid>\n            </Grid>\n          ) : (\n            <Button variant=\"outlined\" onClick={() => setIsCompose(true)}>\n              {t(\"comment:write\")}\n            </Button>\n          )}\n        </Grid>\n      )}\n      <Grid item xs={12}>\n        <Box margin=\"2% 0\" />\n      </Grid>\n      {tmpComments.length ? (\n        tmpComments.map((comm) => (\n          <Fragment>\n            <Grid item xs={12}>\n              <CommentBlock\n                comment={comm}\n                // onThumbsUp={async (id) => {\n                //   await patchCommentLike(contentType, contentId, id);\n                // }}\n                onReport={async (id) => {\n                  setIsReportOpen(true);\n                  setReportId(id);\n                }}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <Divider />\n            </Grid>\n          </Fragment>\n        ))\n      ) : (\n        <Typography>{t(\"comment:no_comment_yet\")}</Typography>\n      )}\n      <Dialog\n        open={isReportOpen}\n        onClose={() => {\n          setIsReportOpen(false);\n          setReportContent(\"\");\n          setReportId(0);\n        }}\n      >\n        <DialogTitle>{t(\"comment:report-abuse.title\")}</DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            {t(\"comment:report-abuse.description\")}\n          </DialogContentText>\n          <FormControl>\n            <InputLabel>{t(\"comment:report-abuse.reason.label\")}</InputLabel>\n            <Select\n              value={reportReason}\n              onChange={(ev) =>\n                setReportReason(ev.target.value as CommentAbuseReason)\n              }\n            >\n              <MenuItem value=\"OTHER\">\n                {t(\"comment:report-abuse.reason.other\")}\n              </MenuItem>\n              <MenuItem value=\"BAD_WORDS\">\n                {t(\"comment:report-abuse.reason.bad_words\")}\n              </MenuItem>\n              <MenuItem value=\"DISCRIMINATION\">\n                {t(\"comment:report-abuse.reason.discrimination\")}\n              </MenuItem>\n            </Select>\n          </FormControl>\n          <TextField\n            fullWidth\n            value={reportContent}\n            margin=\"dense\"\n            label={t(\"comment:report-abuse.content\")}\n            type=\"text\"\n            onChange={(ev) => setReportContent(ev.target.value)}\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button\n            onClick={async () => {\n              await postCommentAbuse(\n                contentType,\n                contentId,\n                reportId,\n                reportReason,\n                reportContent\n              );\n              // const idx = tmpComments.findIndex(\n              //   (comm) => comm.id === reportId\n              // )!;\n              // setTmpComments([\n              //   ...tmpComments.slice(0, idx),\n              //   ...tmpComments.slice(idx + 1),\n              // ]);\n              setIsReportSuccess(true);\n              setIsReportOpen(false);\n            }}\n            color=\"primary\"\n          >\n            {t(\"common:submit\")}\n          </Button>\n        </DialogActions>\n      </Dialog>\n      <Snackbar\n        open={isReportSuccess}\n        autoHideDuration={3000}\n        onClose={() => {\n          setIsReportSuccess(false);\n        }}\n      >\n        <Alert\n          onClose={() => {\n            setIsReportSuccess(false);\n          }}\n          severity=\"success\"\n        >\n          {t(\"comment:report-abuse.success\")}\n        </Alert>\n      </Snackbar>\n    </Grid>\n  );\n};\n\nexport default Comment;\n","import { Container, Divider, Grid, Typography } from \"@material-ui/core\";\nimport React, { Fragment, useEffect, useMemo, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useParams } from \"react-router-dom\";\nimport MarkdownIt from \"markdown-it\";\n// @ts-ignore\nimport MarkdownItCollapsible from \"markdown-it-collapsible\";\nimport MdEditor from \"react-markdown-editor-lite\";\nimport \"react-markdown-editor-lite/lib/index.css\";\nimport { AnnouncementModel } from \"../../strapi-model\";\nimport { useLayoutStyles } from \"../../styles/layout\";\nimport { useStrapi } from \"../../utils/apiClient\";\nimport Comment from \"../comment/Comment\";\nimport { CommentTextMultiple } from \"mdi-material-ui\";\n\nconst AnnouncementDetail: React.FC<{}> = () => {\n  const layoutClasses = useLayoutStyles();\n  const { id } = useParams<{ id: string }>();\n  const { getAnnouncementById } = useStrapi();\n  const { t } = useTranslation();\n\n  const mdParser = useMemo(\n    () =>\n      new MarkdownIt({ linkify: true, typographer: true }).use(\n        MarkdownItCollapsible\n      ),\n    []\n  );\n\n  const [announcement, setAnnouncement] = useState<AnnouncementModel>();\n\n  useEffect(() => {\n    getAnnouncementById(id).then(setAnnouncement);\n  }, [getAnnouncementById, id]);\n\n  return !!announcement ? (\n    <Fragment>\n      <Typography variant=\"h6\" className={layoutClasses.header}>\n        {announcement.title}\n      </Typography>\n      <Grid container spacing={1}>\n        <Grid item>\n          <Typography variant=\"subtitle2\" color=\"textSecondary\">\n            {t(\"announcement:category\")}:{\" \"}\n            {t(`announcement:categoryName.${announcement.category}`)}\n          </Typography>\n        </Grid>\n        <Grid item>\n          <Typography variant=\"subtitle2\" color=\"textSecondary\">\n            {t(\"announcement:author\")}: {announcement.user.username}\n          </Typography>\n        </Grid>\n        <Grid item>\n          <Typography variant=\"subtitle2\" color=\"textSecondary\">\n            {t(\"announcement:published_at\")}:{\" \"}\n            {new Date(announcement.published_at).toLocaleString()}\n          </Typography>\n        </Grid>\n      </Grid>\n      <Divider style={{ margin: \"1% 0\" }} />\n      <Container className={layoutClasses.content}>\n        <MdEditor\n          value={announcement.content}\n          renderHTML={(text) => mdParser.render(text)}\n          config={{ view: { html: true }, canView: { html: true } }}\n        />\n      </Container>\n      <Typography variant=\"h6\" className={layoutClasses.header}>\n        {t(\"common:comment\")} <CommentTextMultiple />\n      </Typography>\n      <Container className={layoutClasses.content} maxWidth=\"md\">\n        <Comment\n          comments={announcement.comments.filter((comm) => !comm.blocked)}\n          contentType=\"announcement\"\n          contentId={Number(id)}\n        />\n      </Container>\n    </Fragment>\n  ) : (\n    <Typography variant=\"h6\" className={layoutClasses.header}>\n      Loading...\n    </Typography>\n  );\n};\n\nexport default AnnouncementDetail;\n"],"sourceRoot":""}