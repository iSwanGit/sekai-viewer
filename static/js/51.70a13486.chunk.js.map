{"version":3,"sources":["components/subs/ContentTrans.tsx","components/storyreader/StoryReaderSnippet.tsx","components/storyreader/StoryReaderContent.tsx","components/storyreader/StoryReader.tsx"],"names":["ContentTrans","mode","contentKey","original","originalProps","translatedProps","assetTOptions","assetT","useAssetI18n","color","container","direction","CharaNameTrans","characterId","useCachedData","charas","assetI18n","useState","chara","setChara","useEffect","length","find","c","id","firstName","givenName","includes","language","ReleaseCondTrans","releaseCondId","releaseConds","releaseCond","setReleaseCond","rc","i18nKey","releaseConditionType","Object","assign","level","releaseConditionTypeLevel","releaseConditionTypeId","rank","point","releaseConditionTypeQuantity","sentence","useStyle","makeStyles","theme","card","margin","spacing","padding","AudioPlayButton","url","isPlay","setIsPlay","audioSource","setAudioSource","isAudioLoading","setIsAudioLoading","PlayAudio","useCallback","stop","play","audio","Howl","src","on","Fab","onClick","size","Stop","CircularProgress","variant","PlayArrow","Talk","characterName","text","voiceUrl","classes","Card","className","Grid","alignItems","item","xs","md","justify","Avatar","charaIcons","Chip","label","Typography","SpecialEffect","seType","resource","t","useTranslation","isBGOpen","setIsBGOpen","isMovieOpen","setIsMovieOpen","trimStart","CardMedia","window","open","image","style","paddingTop","cursor","Button","maxWidth","controls","Sound","hasBgm","hasSe","endsWith","episodeBanner","StoryReaderContent","useParams","storyType","storyId","layoutClasses","useLayoutStyles","contentTransMode","useContext","SettingContext","getProcessedScenarioData","useProcessedScenarioData","unitStories","eventStories","characterProfiles","cardEpisodes","bannerUrl","setBannerUrl","chapterTitle","setChapterTitle","episodeTitle","setEpisodeTitle","characters","actions","scenarioData","setScenarioData","releaseConditionId","setReleaseConditionId","split","unitId","chapterNo","episodeId","chapter","us","unit","chapters","ch","Number","episode","episodes","ep","getRemoteAssetURL","assetbundleName","scenarioId","then","data","title","episodeNoLabel","eventId","es","eventStoryEpisodes","episodeNo","charaId","cp","cardEpisodeId","ce","Container","content","Paper","backgroundSize","height","align","map","action","idx","type","SnippetAction","key","name","body","voice","bgm","se","StoryReader","useRouteMatch","path","match","unitProfiles","events","cards","setStoryType","setUnitId","unitStoryChapterId","setUnitStoryChapterId","unitStoryEpisodeId","setUnitStoryEpisodeId","setEventId","eventStoryEpisodeId","setEventStoryEpisodeId","setCharaId","cardId","setCardId","setCardEpisodeId","params","header","Alert","severity","alert","FormControl","width","InputLabel","Select","labelId","value","onChange","e","target","MenuItem","unitName","overflow","ev","filter","prefix","component","Link","to"],"mappings":"4RAWaA,EAOR,SAAC,GAOC,IANLC,EAMI,EANJA,KACAC,EAKI,EALJA,WACAC,EAII,EAJJA,SACAC,EAGI,EAHJA,cACAC,EAEI,EAFJA,gBACAC,EACI,EADJA,cAEQC,EAAWC,cAAXD,OACR,OAAQN,GACN,IAAK,WACH,OAAO,kBAAC,IAAeG,EAAgBD,GACzC,IAAK,aACH,OACE,kBAAC,IAAD,iBAAgBE,EAAhB,CAAiCI,MAAM,gBACpCF,EAAOL,EAAYC,EAAUG,IAGpC,IAAK,OACH,OACE,kBAAC,IAAD,CAAMI,WAAS,EAACC,UAAU,UACxB,kBAAC,IAAD,iBAAgBP,EAAhB,CAA+BK,MAAM,gBAClCN,GAEH,kBAAC,IAAD,iBAAgBE,EAAhB,CAAiCI,MAAM,kBACpCF,EAAOL,EAAYC,EAAUG,OAO7BM,EAMR,SAAC,GAA0E,IAAxEX,EAAuE,EAAvEA,KAAMY,EAAiE,EAAjEA,YAAaT,EAAoD,EAApDA,cAAeC,EAAqC,EAArCA,gBAAiBC,EAAoB,EAApBA,cAAoB,EAC5DQ,YAA0B,kBAApCC,EADsE,sBAE/CP,cAAtBD,EAFqE,EAErEA,OAAQS,EAF6D,EAE7DA,UAF6D,EAInDC,qBAJmD,mBAItEC,EAJsE,KAI/DC,EAJ+D,KAY7E,GANAC,qBAAU,WACJL,EAAOM,QACTF,EAASJ,EAAOO,MAAK,SAACC,GAAD,OAAOA,EAAEC,KAAOX,QAEtC,CAACE,EAAQF,KAERK,EAiFF,OAAO,kBAAC,IAAD,MAhFP,OAAQjB,GACN,IAAK,WACH,OACE,kBAAC,IAAD,iBAAgBG,EAAhB,CAA+BK,MAAM,gBAClCS,EAAMO,UADT,IACqBP,EAAMQ,WAG/B,IAAK,aACH,MAAO,CAAC,QAAS,QAAS,KAAM,MAAMC,SAASX,EAAUY,UACvD,kBAAC,IAAD,iBAAgBvB,EAAhB,CAAiCI,MAAM,gBACpCS,EAAMO,UACHlB,EAAO,kBAAD,OACcM,EADd,cAEJK,EAAMO,UACNnB,GAEF,GAAI,IACPC,EAAO,kBAAD,OACaM,EADb,cAELK,EAAMQ,UACNpB,IAIJ,kBAAC,IAAD,KACGC,EAAO,kBAAD,OACaM,EADb,cAELK,EAAMQ,UACNpB,GACC,IACFY,EAAMO,UACHlB,EAAO,kBAAD,OACcM,EADd,cAEJK,EAAMO,UACNnB,GAEF,IAGV,IAAK,OACH,OACE,kBAAC,IAAD,CAAMI,WAAS,EAACC,UAAU,UACxB,kBAAC,IAAeP,EACbc,EAAMO,UADT,IACqBP,EAAMQ,WAE1B,CAAC,QAAS,QAAS,KAAM,MAAMC,SAASX,EAAUY,UACjD,kBAAC,IAAD,eAAYnB,MAAM,iBAAoBJ,GACnCa,EAAMO,UACHlB,EAAO,kBAAD,OACcM,EADd,cAEJK,EAAMO,UACNnB,GAEF,GAAI,IACPC,EAAO,kBAAD,OACaM,EADb,cAELK,EAAMQ,UACNpB,IAIJ,kBAAC,IAAD,eAAYG,MAAM,iBAAoBJ,GACnCE,EAAO,kBAAD,OACaM,EADb,cAELK,EAAMQ,UACNpB,GACC,IACFY,EAAMO,UACHlB,EAAO,kBAAD,OACcM,EADd,cAEJK,EAAMO,UACNnB,GAEF,OAWPuB,EAMR,SAAC,GAMC,IALL5B,EAKI,EALJA,KACA6B,EAII,EAJJA,cACA1B,EAGI,EAHJA,cACAC,EAEI,EAFJA,gBACAC,EACI,EADJA,cACI,EACmBQ,YAAiC,qBAAjDiB,EADH,sBAGkCd,qBAHlC,mBAGGe,EAHH,KAGgBC,EAHhB,KAWJ,GANAb,qBAAU,WACJW,EAAaV,QACfY,EAAeF,EAAaT,MAAK,SAACY,GAAD,OAAQA,EAAGV,KAAOM,QAEpD,CAACA,EAAeC,IAEfC,EAAa,CACf,IAAIG,EAAU,GACd,OAAQH,EAAYI,sBAClB,IAAK,OACHD,EAAO,4BAAwBH,EAAYR,IAC3C,MACF,IAAK,aACHW,EAAO,0BACP7B,EAAgB+B,OAAOC,OAAO,GAAIhC,EAAe,CAC/CiC,MAAOP,EAAYQ,4BAErB,MACF,IAAK,YACHL,EAAO,iCAA6BH,EAAYS,wBAChDnC,EAAgB+B,OAAOC,OAAO,GAAIhC,EAAe,CAC/CoC,KAAMV,EAAYQ,4BAEpB,MACF,IAAK,cACHL,EAAO,2BACP7B,EAAgB+B,OAAOC,OAAO,GAAIhC,EAAe,CAC/CqC,MAAOX,EAAYY,+BAErB,MACF,QACET,EAAO,uBAAmBH,EAAYI,sBAG1C,OACE,kBAACpC,EAAD,CACEC,KAAMA,EACNC,WAAYiC,EACZhC,SAAU6B,EAAYa,SACtBzC,cAAeA,EACfC,gBAAiBA,EACjBC,cAAeA,IAInB,OAAO,gC,8VCpMLwC,EAAWC,aAAW,SAACC,GAAD,MAAY,CACtCC,KAAM,CACJC,OAAQF,EAAMG,QAAQ,IAAK,GAC3BC,QAASJ,EAAMG,QAAQ,IAAK,QAI1BE,EAA6C,SAAC,GAAa,IAAXC,EAAU,EAAVA,IAAU,EAClCrC,oBAAS,GADyB,mBACvDsC,EADuD,KAC/CC,EAD+C,OAExBvC,qBAFwB,mBAEvDwC,EAFuD,KAE1CC,EAF0C,OAGlBzC,oBAAS,GAHS,mBAGvD0C,EAHuD,KAGvCC,EAHuC,KAKxDC,EAAYC,uBAAY,WAC5B,GAAKP,EAqBCE,GACFA,EAAYM,OAEdP,GAAU,OAxBC,CACX,GAAIC,EAEF,YADAA,EAAYO,OAGdJ,GAAkB,GAClB,IAAMK,EAAQ,IAAIC,OAAK,CACrBC,IAAK,CAACb,KAERW,EAAMG,GAAG,QAAQ,WACfR,GAAkB,GAClBK,EAAMD,UAERC,EAAMG,GAAG,QAAQ,WACfZ,GAAU,MAEZS,EAAMG,GAAG,OAAO,WACdZ,GAAU,MAEZE,EAAeO,MAOhB,CAACX,EAAKG,EAAaF,IAQtB,OANAnC,qBAAU,WACR,OAAO,WACDqC,GAAaA,EAAYM,UAE9B,CAACN,IAGF,kBAACY,EAAA,EAAD,CAAKC,QAAST,EAAWU,KAAK,SAC3BhB,EACC,kBAACiB,EAAA,EAAD,MACEb,EACF,kBAACc,EAAA,EAAD,CAAkBC,QAAQ,gBAAgBH,KAAK,OAAO9D,MAAM,YAE5D,kBAACkE,EAAA,EAAD,QAMKC,EAKR,SAAC,GAAoD,IAAlD/D,EAAiD,EAAjDA,YAAagE,EAAoC,EAApCA,cAAeC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SAClCC,EAAUlC,IAEhB,OACE,kBAACmC,EAAA,EAAD,CAAMC,UAAWF,EAAQ/B,MACvB,kBAACkC,EAAA,EAAD,CAAMzE,WAAS,EAAC0E,WAAW,UACzB,kBAACD,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,EAAGC,GAAI,GACpB,kBAACJ,EAAA,EAAD,CAAMzE,WAAS,EAAC8E,QAAQ,UACtB,kBAACC,EAAA,EAAD,CACEtB,IAAKuB,IAAW,YAAD,OAAa7E,QAIlC,kBAACsE,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,EAAGC,GAAI,GACpB,kBAACJ,EAAA,EAAD,CAAMzE,WAAS,EAACyC,QAAS,GACvB,kBAACgC,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,IACb,kBAACK,EAAA,EAAD,CAAMC,MAAOf,KAEf,kBAACM,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,IACb,kBAACO,EAAA,EAAD,KAAaf,MAIlBC,EACC,kBAACI,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GACb,kBAAC,EAAD,CAAiBhC,IAAKyB,KAEtB,QAMCe,EAIR,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,OAAQjB,EAAqB,EAArBA,KAAMkB,EAAe,EAAfA,SACdhB,EAAUlC,IACRmD,EAAMC,cAAND,EAF2B,EAIHhF,oBAAS,GAJN,mBAI5BkF,EAJ4B,KAIlBC,EAJkB,OAKGnF,oBAAS,GALZ,mBAK5BoF,EAL4B,KAKfC,EALe,KAOnC,OAAQP,GACN,IAAK,iBACH,OACE,kBAACd,EAAA,EAAD,CAAMC,UAAWF,EAAQ/B,MACvB,kBAACkC,EAAA,EAAD,CAAMzE,WAAS,EAAC0E,WAAW,UACzB,kBAACD,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,EAAGC,GAAI,IACtB,kBAACJ,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,EAAGC,GAAI,GACpB,kBAACJ,EAAA,EAAD,CAAMzE,WAAS,EAACyC,QAAS,GACvB,kBAACgC,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,IACb,kBAACK,EAAA,EAAD,CAAMC,MAAOK,EAAE,0CAEjB,kBAACd,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,IACb,kBAACO,EAAA,EAAD,KAAaf,EAAKyB,gBAIvBP,EACC,kBAACb,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GACb,kBAAC,EAAD,CAAiBhC,IAAK0C,KAEtB,OAIZ,IAAK,QACH,OACE,kBAACf,EAAA,EAAD,CAAMC,UAAWF,EAAQ/B,MACvB,kBAACkC,EAAA,EAAD,CAAMzE,WAAS,EAAC0E,WAAW,UACzB,kBAACD,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,EAAGC,GAAI,IACtB,kBAACJ,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,EAAGC,GAAI,GACpB,kBAACJ,EAAA,EAAD,CAAMzE,WAAS,EAACyC,QAAS,GACvB,kBAACgC,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,IACb,kBAACK,EAAA,EAAD,CAAMC,MAAOK,EAAE,iCAEjB,kBAACd,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,IACb,kBAACO,EAAA,EAAD,KAAaf,EAAKyB,kBAOhC,IAAK,mBACH,OACE,kBAACtB,EAAA,EAAD,CAAMC,UAAWF,EAAQ/B,MACvB,kBAACkC,EAAA,EAAD,CAAMzE,WAAS,EAAC0E,WAAW,UACzB,kBAACD,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,EAAGC,GAAI,IACtB,kBAACJ,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,EAAGC,GAAI,GACpB,kBAACJ,EAAA,EAAD,CAAMzE,WAAS,EAACyC,QAAS,GACvB,kBAACgC,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,IACb,kBAACK,EAAA,EAAD,CAAMC,MAAOK,EAAE,4CAEhBE,EACC,kBAAChB,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,IACb,kBAACkB,EAAA,EAAD,CACElC,QAAS,kBAAMmC,OAAOC,KAAKV,EAAU,WACrCW,MAAOX,EACPY,MAAO,CAAEC,WAAY,SAAUC,OAAQ,cAI3C,kBAAC3B,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,IACb,kBAACyB,EAAA,EAAD,CACErC,QAAQ,YACRJ,QAAS,kBAAM8B,GAAY,KAE1BH,EAAE,6CASrB,IAAK,QACH,OACE,kBAAChB,EAAA,EAAD,CAAMC,UAAWF,EAAQ/B,MACvB,kBAACkC,EAAA,EAAD,CAAMzE,WAAS,EAAC0E,WAAW,UACzB,kBAACD,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,EAAGC,GAAI,IACtB,kBAACJ,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,EAAGC,GAAI,GACpB,kBAACJ,EAAA,EAAD,CAAMzE,WAAS,EAACyC,QAAS,GACvB,kBAACgC,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,IACb,kBAACK,EAAA,EAAD,CAAMC,MAAOK,EAAE,iCAEhBI,EACC,kBAAClB,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,IACb,2BAAOsB,MAAO,CAAEI,SAAU,QAAUC,UAAQ,GAC1C,4BAAQ9C,IAAK6B,MAIjB,kBAACb,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,IACb,kBAACyB,EAAA,EAAD,CACErC,QAAQ,YACRJ,QAAS,kBAAMgC,GAAe,KAE7BL,EAAE,wCASrB,QACE,OAAO,OAIAiB,EAIR,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,MAAOrC,EAAe,EAAfA,SACfC,EAAUlC,IACRmD,EAAMC,cAAND,EAER,OACE,kBAAChB,EAAA,EAAD,CAAMC,UAAWF,EAAQ/B,MACvB,kBAACkC,EAAA,EAAD,CAAMzE,WAAS,EAAC0E,WAAW,UACzB,kBAACD,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,EAAGC,GAAI,IACtB,kBAACJ,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,EAAGC,GAAI,GACpB,kBAACJ,EAAA,EAAD,CAAMzE,WAAS,EAACyC,QAAS,GACvB,kBAACgC,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,IACb,kBAACK,EAAA,EAAD,CACEC,MACEuB,EACIlB,EAAE,4BACFmB,EACAnB,EAAE,2BACF,aAITlB,EAASsC,SAAS,gBACjB,kBAAClC,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,IACb,kBAACO,EAAA,EAAD,KAAaI,EAAE,kCAEf,OAGPlB,IAAaA,EAASsC,SAAS,gBAC9B,kBAAClC,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GACb,kBAAC,EAAD,CAAiBhC,IAAKyB,KAEtB,QCtPNjC,EAAWC,aAAW,SAACC,GAAD,MAAY,CACtCsE,cAAe,CACblE,QAASJ,EAAMG,QAAQ,IAAK,QAmOjBoE,EA/N0B,WAAO,IAAD,EACdC,cAAvBC,EADqC,EACrCA,UAAWC,EAD0B,EAC1BA,QAIbC,EAAgBC,cAChB5C,EAAUlC,IACRmD,EAAMC,cAAND,EACA4B,EAAqBC,qBAAWC,KAAhCF,iBACFG,EAA2BC,YAAyBJ,GATb,EAWvB/G,YAA0B,eAAzCoH,EAXsC,sBAYtBpH,YAA2B,gBAA3CqH,EAZsC,sBAajBrH,YAA6B,qBAAlDsH,EAbsC,sBActBtH,YAA4B,gBAA5CuH,EAdsC,sBAgBXpH,mBAAiB,IAhBN,mBAgBtCqH,EAhBsC,KAgB3BC,EAhB2B,OAiBLtH,mBAAiB,IAjBZ,mBAiBtCuH,EAjBsC,KAiBxBC,EAjBwB,OAkBLxH,mBAAiB,IAlBZ,mBAkBtCyH,EAlBsC,KAkBxBC,EAlBwB,OAmBL1H,mBAQrC,CACD2H,WAAY,GACZC,QAAS,KA7BkC,mBAmBtCC,EAnBsC,KAmBxBC,EAnBwB,OA+BO9H,mBAAiB,GA/BxB,mBA+BtC+H,GA/BsC,KA+BlBC,GA/BkB,KAiJ7C,OAhHA7H,qBAAU,WAKR,OAJA2H,EAAgB,CACdH,WAAY,GACZC,QAAS,KAEHpB,GACN,IAAK,YACH,GAAIS,EAAY7G,OAAQ,CAAC,IAAD,EACiBqG,EAAQwB,MAAM,KAD/B,mBACfC,EADe,KACPC,EADO,KACIC,EADJ,KAGhBC,EAAUpB,EACb5G,MAAK,SAACiI,GAAD,OAAQA,EAAGC,OAASL,KACzBM,SAASnI,MAAK,SAACoI,GAAD,OAAQA,EAAGN,YAAcO,OAAOP,MAE3CQ,EAAUN,EAAQO,SAASvI,MAC/B,SAACwI,GAAD,OAAQA,EAAGtI,KAAOmI,OAAON,MAG3BU,YAAkB,uBAAD,OACQT,EAAQU,gBADhB,gBACuCJ,EAAQI,gBAD/C,SAEfzB,GAEFP,EAAyB,sBAAD,OACAsB,EAAQU,gBADR,gBAC+BJ,EAAQK,WADvC,WAEtB,GACAC,MAAK,SAACC,GAAD,OAAUpB,EAAgBoB,MAEjC1B,EAAgBa,EAAQc,OACxBzB,EAAgB,GAAD,OAAIiB,EAAQS,eAAZ,cAAgCT,EAAQQ,QACvDnB,GAAsBW,EAAQZ,oBAEhC,MACF,IAAK,aACH,GAAIb,EAAa9G,OAAQ,CAAC,IAAD,EACMqG,EAAQwB,MAAM,KADpB,mBAChBoB,EADgB,KACPjB,EADO,KAGjBC,EAAUnB,EAAa7G,MAC3B,SAACiJ,GAAD,OAAQA,EAAGD,UAAYX,OAAOW,MAG1BV,EAAUN,EAAQkB,mBAAmBlJ,MACzC,SAACwI,GAAD,OAAQA,EAAGtI,KAAOmI,OAAON,MAG3BU,YAAkB,eAAD,OACAT,EAAQU,gBADR,8BAC6CJ,EAAQI,gBADrD,SAEfzB,GAEFP,EAAyB,eAAD,OACPsB,EAAQU,gBADD,yBACiCJ,EAAQK,WADzC,WAEtB,GACAC,MAAK,SAACC,GAAD,OAAUpB,EAAgBoB,MAEjC1B,EAAgB,IAChBE,EAAgB,GAAD,OAAIiB,EAAQa,UAAZ,cAA2Bb,EAAQQ,QAClDnB,GAAsBW,EAAQZ,oBAEhC,MACF,IAAK,aACH,GAAIZ,EAAkB/G,OAAQ,CAAC,IAAD,EACVqG,EAAQwB,MAAM,KAAzBwB,EADqB,oBAGtBd,EAAUxB,EAAkB9G,MAChC,SAACqJ,GAAD,OAAQA,EAAG9J,cAAgB8I,OAAOe,MAGpCnC,EAAa7C,IAAW,YAAD,OAAagF,KACpC1C,EAAyB,wBAAD,OACE4B,EAAQK,WADV,WAEtB,GACAC,MAAK,SAACC,GAAD,OAAUpB,EAAgBoB,MAEjC1B,EAAgB,IAChBE,EAAgB1C,EAAE,wBAClBgD,GAAsB,GAExB,MACF,IAAK,YACH,GAAIZ,EAAahH,OAAQ,CAAC,IAAD,EACKqG,EAAQwB,MAAM,KAA/B0B,EADY,oBAGjBhB,EAAUvB,EAAa/G,MAC3B,SAACuJ,GAAD,OAAQA,EAAGrJ,KAAOmI,OAAOiB,MAI3Bb,YAAkB,0BAAD,OACWH,EAAQI,gBADnB,yBAEfzB,GAEFP,EAAyB,oBAAD,OACF4B,EAAQI,gBADN,gBAC6BJ,EAAQK,WADrC,WAEtB,GACAC,MAAK,SAACC,GAAD,OAAUpB,EAAgBoB,MAEjC1B,EAAgB,IAChBE,EAAgBiB,EAAQQ,OACxBnB,GAAsBW,EAAQZ,wBAInC,CACDd,EACAC,EACAT,EACAD,EACAO,EACAI,EACAC,EACApC,IAIA,kBAAC6E,EAAA,EAAD,CAAW5F,UAAWyC,EAAcoD,SAClC,kBAACC,EAAA,EAAD,CAAO9F,UAAWF,EAAQsC,eACxB,kBAACnC,EAAA,EAAD,CAAMzE,WAAS,EAACyC,QAAS,GACvB,kBAACgC,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIC,GAAI,GACrB,kBAACiB,EAAA,EAAD,CACEG,MAAO2B,EACP1B,MAAO,CAAEC,WAAY,SAAUoE,eAAgB,cAGnD,kBAAC9F,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIC,GAAI,GACrB,kBAACJ,EAAA,EAAD,CACEzE,WAAS,EACTyC,QAAS,EACTiC,WAAW,SACXI,QAAQ,SACRoB,MAAO,CAAEsE,OAAQ,SAEhB1C,EACC,kBAACrD,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,IACb,kBAACO,EAAA,EAAD,CAAYsF,MAAM,UAAU3C,IAE5B,KACJ,kBAACrD,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,IACb,kBAACO,EAAA,EAAD,CAAYsF,MAAM,UAAUzC,IAE7BM,GACC,kBAAC7D,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,IACb,kBAAC,IAAD,CACErF,KAAM4H,EACN/F,cAAekH,GACf5I,cAAe,CAAE+K,MAAO,UACxB9K,gBAAiB,CAAE8K,MAAO,aAG5B,SAKXrC,EAAaD,QAAQuC,KAAI,SAACC,EAAQC,GACjC,OAAQD,EAAOE,MACb,KAAKC,IAAc5G,KACjB,OACE,kBAAC,EAAD,CACE6G,IAAG,iBAAYH,GACfzK,YAAawK,EAAOnK,MAAMM,GAC1BqD,cAAewG,EAAOnK,MAAMwK,KAC5B5G,KAAMuG,EAAOM,KACb5G,SAAUsG,EAAOO,QAGvB,KAAKJ,IAAc1F,cACjB,OACE,kBAAC,EAAD,CACE2F,IAAG,iBAAYH,GACfvF,OAAQsF,EAAOtF,OACfjB,KAAMuG,EAAOM,KACb3F,SAAUqF,EAAOrF,WAGvB,KAAKwF,IAActE,MACjB,OACE,kBAAC,EAAD,CACEuE,IAAG,iBAAYH,GACfnE,OAAQkE,EAAOlE,OACfC,MAAOiE,EAAOjE,MACdrC,SAAUsG,EAAOlE,OAASkE,EAAOQ,IAAMR,EAAOS,KAGpD,QACE,OAAO,WCsOJC,UAjcmB,WAEhC,IAAMpE,EAAgBC,cACd3B,EAAMC,cAAND,EAH8B,EAIhB+F,cAAdC,EAJ8B,EAI9BA,KAAM3I,EAJwB,EAIxBA,IACR4I,EAAQF,YAGX,oCAEKnE,EAAqBC,qBAAWC,KAAhCF,iBAV8B,EAaf/G,YAA4B,gBAA5CqL,EAb+B,sBAchBrL,YAA0B,eAAzCoH,EAd+B,sBAefpH,YAA2B,gBAA3CqH,EAf+B,sBAgBrBrH,YAA0B,UAApCsL,EAhB+B,sBAiBVtL,YAA6B,qBAAlDsH,EAjB+B,sBAkBftH,YAA4B,gBAA5CuH,EAlB+B,sBAmBtBvH,YAAyB,SAAlCuL,EAnB+B,sBAqBJpL,mBAAoB,aArBhB,mBAqB/BwG,EArB+B,KAqBpB6E,EArBoB,OAsBVrL,mBAAiB,QAtBP,mBAsB/BkI,EAtB+B,KAsBvBoD,EAtBuB,OAuBctL,mBAAiB,GAvB/B,mBAuB/BuL,EAvB+B,KAuBXC,EAvBW,OAwBcxL,mBAAiB,KAxB/B,oBAwB/ByL,GAxB+B,MAwBXC,GAxBW,SAyBR1L,mBAAiB,GAzBT,qBAyB/BqJ,GAzB+B,MAyBtBsC,GAzBsB,SA0BgB3L,mBACpD,SA3BoC,qBA0B/B4L,GA1B+B,MA0BVC,GA1BU,SA6BR7L,mBAAiB,GA7BT,qBA6B/ByJ,GA7B+B,MA6BtBqC,GA7BsB,SA8BV9L,mBAAiB,GA9BP,qBA8B/B+L,GA9B+B,MA8BvBC,GA9BuB,SA+BIhM,mBAAiB,GA/BrB,qBA+B/B2J,GA/B+B,MA+BhBsC,GA/BgB,MA2EtC,OA1CA9L,qBAAU,WACR,GAAI8K,EAEF,OADAI,EAAaJ,EAAMiB,OAAO1F,WAClByE,EAAMiB,OAAO1F,WACnB,IAAK,YACF,IAAD,EACyCyE,EAAMiB,OAAOzF,QAAQwB,MAC1D,KAFJ,mBACSC,EADT,KACiBC,EADjB,KAC4BC,EAD5B,KAIEkD,EAAUpD,GACVsD,EAAsB9C,OAAOP,IAC7BuD,GAAsBhD,OAAON,IAE/B,MACF,IAAK,aACF,IAAD,EAC+B6C,EAAMiB,OAAOzF,QAAQwB,MAAM,KAD1D,mBACSoB,EADT,KACkBjB,EADlB,KAEEuD,GAAWjD,OAAOW,IAClBwC,GAAuBnD,OAAON,IAEhC,MACF,IAAK,aACF,IAAD,EACoB6C,EAAMiB,OAAOzF,QAAQwB,MAAM,KAAtCwB,EADT,oBAEEqC,GAAWpD,OAAOe,IAEpB,MACF,IAAK,YACF,IAAD,EAC2CwB,EAAMiB,OAAOzF,QAAQwB,MAC5D,KAFJ,mBACSwB,EADT,KACkBsC,EADlB,KAC0BpC,EAD1B,KAIEsC,GAAiBvD,OAAOiB,IACxBqC,GAAUtD,OAAOqD,IACjBD,GAAWpD,OAAOe,OAMzB,QAACwB,QAAD,IAACA,OAAD,EAACA,EAAOiB,OAAO1F,UAAf,OAA0ByE,QAA1B,IAA0BA,OAA1B,EAA0BA,EAAOiB,OAAOzF,UAGzC,kBAAC,WAAD,KACE,kBAAC7B,EAAA,EAAD,CAAYnB,QAAQ,KAAKQ,UAAWyC,EAAcyF,QAC/CnH,EAAE,uBAEL,kBAACoH,EAAA,EAAD,CAAOC,SAAS,UAAUpI,UAAWyC,EAAc4F,OAChDtH,EAAE,yBAEL,kBAAC6E,EAAA,EAAD,CAAW5F,UAAWyC,EAAcoD,QAAS/D,SAAS,MACpD,kBAAC7B,EAAA,EAAD,CAAMzE,WAAS,EAACyC,QAAS,GACvB,kBAACgC,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIC,GAAI,GACrB,kBAACiI,EAAA,EAAD,CAAa5G,MAAO,CAAE6G,MAAO,SAC3B,kBAACC,EAAA,EAAD,CAAYlM,GAAG,qBACZyE,EAAE,uCAEL,kBAAC0H,EAAA,EAAD,CACEC,QAAQ,oBACRC,MAAOpG,EACPqG,SAAU,SAACC,GAAD,OAAOzB,EAAayB,EAAEC,OAAOH,SAEvC,kBAACI,EAAA,EAAD,CAAUJ,MAAM,cACd,kBAAChI,EAAA,EAAD,KACGI,EAAE,yCAGP,kBAACgI,EAAA,EAAD,CAAUJ,MAAM,aACd,kBAAChI,EAAA,EAAD,KACGI,EAAE,wCAGP,kBAACgI,EAAA,EAAD,CAAUJ,MAAM,cACd,kBAAChI,EAAA,EAAD,KACGI,EAAE,yCAGP,kBAACgI,EAAA,EAAD,CAAUJ,MAAM,aACd,kBAAChI,EAAA,EAAD,KACGI,EAAE,2CAME,cAAdwB,EACC0E,EAAa9K,QAAU6G,EAAY7G,OACjC,kBAAC,WAAD,KACE,kBAAC8D,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIC,GAAI,GACrB,kBAACiI,EAAA,EAAD,CAAa5G,MAAO,CAAE6G,MAAO,SAC3B,kBAACC,EAAA,EAAD,CAAYlM,GAAG,oBACZyE,EAAE,sCAEL,kBAAC0H,EAAA,EAAD,CACEC,QAAQ,mBACRC,MAAO1E,EACP2E,SAAU,SAACC,GACTxB,EAAUwB,EAAEC,OAAOH,OACnBpB,EAAsB,GACtBE,GACEzE,EACG5G,MAAK,SAACiI,GAAD,OAAQA,EAAGC,OAASuE,EAAEC,OAAOH,SAClCpE,SAASnI,MACR,SAACgI,GAAD,OAAmC,IAAtBA,EAAQF,aACpBS,SAAS,GAAGrI,MAIpB2K,EAAaf,KAAI,SAAC5B,GAAD,OAChB,kBAACyE,EAAA,EAAD,CAAUJ,MAAOrE,EAAKA,KAAMiC,IAAKjC,EAAKA,MACpC,kBAACxJ,EAAA,EAAD,CACEC,KAAM4H,EACN3H,WAAU,uBAAkBsJ,EAAKA,KAAvB,SACVrJ,SAAUqJ,EAAK0E,kBAO3B,kBAAC/I,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIC,GAAI,GACrB,kBAACiI,EAAA,EAAD,CAAa5G,MAAO,CAAE6G,MAAO,SAC3B,kBAACC,EAAA,EAAD,CAAYlM,GAAG,6BACZyE,EAAE,8CAEL,kBAAC0H,EAAA,EAAD,CACEC,QAAQ,4BACRC,MAAOrB,EACPsB,SAAU,SAACC,GAAD,OACRtB,EAAsBsB,EAAEC,OAAOH,SAGhC3F,EACE5G,MAAK,SAACiI,GAAD,OAAQA,EAAGC,OAASL,KACzBM,SAAS2B,KAAI,SAAC9B,GAAD,OACZ,kBAAC2E,EAAA,EAAD,CACEJ,MAAOvE,EAAQF,UACfqC,IAAKnC,EAAQF,WAEb,kBAACpJ,EAAA,EAAD,CACEC,KAAM4H,EACN3H,WAAU,mCAA8BoJ,EAAQE,KAAtC,YAA8CF,EAAQF,WAChEjJ,SAAUmJ,EAAQc,MAClBhK,cAAe,CAAEwG,MAAO,CAAEuH,SAAU,WACpC9N,gBAAiB,CACfuG,MAAO,CAAEuH,SAAU,oBAQnC,kBAAChJ,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIC,GAAI,GACrB,kBAACiI,EAAA,EAAD,CAAa5G,MAAO,CAAE6G,MAAO,SAC3B,kBAACC,EAAA,EAAD,CAAYlM,GAAG,6BACZyE,EAAE,8CAEL,kBAAC0H,EAAA,EAAD,CACEC,QAAQ,4BACRC,MAAOnB,GACPoB,SAAU,SAACC,GAAD,OACRpB,GAAsBoB,EAAEC,OAAOH,SAGhC3F,EACE5G,MAAK,SAACiI,GAAD,OAAQA,EAAGC,OAASL,KACzBM,SAASnI,MACR,SAACgI,GAAD,OAAaA,EAAQF,YAAcoD,KAEpC3C,SAASuB,KAAI,SAACxB,GAAD,OACZ,kBAACqE,EAAA,EAAD,CAAUJ,MAAOjE,EAAQpI,GAAIiK,IAAK7B,EAAQpI,IACxC,kBAACxB,EAAA,EAAD,CACEC,KAAM4H,EACN3H,WAAU,mCAA8B0J,EAAQpI,IAChDrB,SAAQ,UAAKyJ,EAAQS,eAAb,cAAiCT,EAAQQ,OACjDhK,cAAe,CAAEwG,MAAO,CAAEuH,SAAU,WACpC9N,gBAAiB,CACfuG,MAAO,CAAEuH,SAAU,qBASnC,KACY,eAAd1G,EACFU,EAAa9G,OACX,kBAAC,WAAD,KACE,kBAAC8D,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIC,GAAI,GACrB,kBAACiI,EAAA,EAAD,CAAa5G,MAAO,CAAE6G,MAAO,SAC3B,kBAACC,EAAA,EAAD,CAAYlM,GAAG,qBACZyE,EAAE,uCAEL,kBAAC0H,EAAA,EAAD,CACEC,QAAQ,oBACRC,MAAOvD,GACPwD,SAAU,SAACC,GACTnB,GAAWmB,EAAEC,OAAOH,OACpBf,GACE3E,EAAa7G,MACX,SAACiJ,GAAD,OAAQA,EAAGD,UAAYyD,EAAEC,OAAOH,SAC/BrD,mBAAmB,GAAGhJ,MAI5B4K,EAAOhB,KAAI,SAACgD,GAAD,OACV,kBAACH,EAAA,EAAD,CAAUJ,MAAOO,EAAG5M,GAAIiK,IAAK2C,EAAG5M,IAC9B,kBAACxB,EAAA,EAAD,CACEC,KAAM4H,EACN3H,WAAU,qBAAgBkO,EAAG5M,IAC7BrB,SAAUiO,EAAG1C,KACbtL,cAAe,CAAEwG,MAAO,CAAEuH,SAAU,WACpC9N,gBAAiB,CAAEuG,MAAO,CAAEuH,SAAU,oBAOlD,kBAAChJ,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIC,GAAI,GACrB,kBAACiI,EAAA,EAAD,CAAa5G,MAAO,CAAE6G,MAAO,SAC3B,kBAACC,EAAA,EAAD,CAAYlM,GAAG,8BACZyE,EAAE,+CAEL,kBAAC0H,EAAA,EAAD,CACEC,QAAQ,6BACRC,MAAOhB,GACPiB,SAAU,SAACC,GAAD,OACRjB,GAAuBiB,EAAEC,OAAOH,SAGjC1F,EACE7G,MAAK,SAACiJ,GAAD,OAAQA,EAAGD,UAAYA,MAC5BE,mBAAmBY,KAAI,SAACxB,GAAD,OACtB,kBAACqE,EAAA,EAAD,CAAUJ,MAAOjE,EAAQpI,GAAIiK,IAAK7B,EAAQpI,IACxC,kBAACxB,EAAA,EAAD,CACEC,KAAM4H,EACN3H,WAAU,oCAA+B0J,EAAQpI,IACjDrB,SAAQ,UAAKyJ,EAAQa,UAAb,cAA4Bb,EAAQQ,OAC5ChK,cAAe,CAAEwG,MAAO,CAAEuH,SAAU,WACpC9N,gBAAiB,CACfuG,MAAO,CAAEuH,SAAU,qBASnC,KACY,eAAd1G,EACFW,EAAkB/G,OAChB,kBAAC,WAAD,KACE,kBAAC8D,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIC,GAAI,GACrB,kBAACiI,EAAA,EAAD,CAAa5G,MAAO,CAAE6G,MAAO,SAC3B,kBAACC,EAAA,EAAD,CAAYlM,GAAG,qBACZyE,EAAE,uCAEL,kBAAC0H,EAAA,EAAD,CACEC,QAAQ,oBACRC,MAAOnD,GACPoD,SAAU,SAACC,GACThB,GAAWgB,EAAEC,OAAOH,SAGrBzF,EAAkBgD,KAAI,SAACT,GAAD,OACrB,kBAACsD,EAAA,EAAD,CAAUJ,MAAOlD,EAAG9J,YAAa4K,IAAKd,EAAG9J,aACvC,kBAAC,IAAD,CACEZ,KAAM4H,EACNhH,YAAa8J,EAAG9J,sBAQ5B,KACY,cAAd4G,GACF4E,EAAMhL,QAAUgH,EAAahH,OAC3B,kBAAC,WAAD,KACE,kBAAC8D,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIC,GAAI,GACrB,kBAACiI,EAAA,EAAD,CAAa5G,MAAO,CAAE6G,MAAO,SAC3B,kBAACC,EAAA,EAAD,CAAYlM,GAAG,qBACZyE,EAAE,uCAEL,kBAAC0H,EAAA,EAAD,CACEC,QAAQ,oBACRC,MAAOnD,GACPoD,SAAU,SAACC,GACThB,GAAWgB,EAAEC,OAAOH,OACpB,IAAMb,EAASX,EAAM/K,MACnB,SAAC2B,GAAD,OAAUA,EAAKpC,cAAgBkN,EAAEC,OAAOH,SACvCrM,GACHyL,GAAUD,GACVE,GACE7E,EAAa/G,MAAK,SAACuJ,GAAD,OAAQA,EAAGmC,SAAWA,KAASxL,MAIpD4G,EAAkBgD,KAAI,SAACT,GAAD,OACrB,kBAACsD,EAAA,EAAD,CAAUJ,MAAOlD,EAAG9J,YAAa4K,IAAKd,EAAG9J,aACvC,kBAAC,IAAD,CACEZ,KAAM4H,EACNhH,YAAa8J,EAAG9J,qBAO5B,kBAACsE,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIC,GAAI,GACrB,kBAACiI,EAAA,EAAD,CAAa5G,MAAO,CAAE6G,MAAO,SAC3B,kBAACC,EAAA,EAAD,CAAYlM,GAAG,oBACZyE,EAAE,sCAEL,kBAAC0H,EAAA,EAAD,CACEC,QAAQ,mBACRC,MAAOb,GACPc,SAAU,SAACC,GACTd,GAAUc,EAAEC,OAAOH,OACnBX,GACE7E,EAAa/G,MACX,SAACuJ,GAAD,OAAQA,EAAGmC,SAAWe,EAAEC,OAAOH,SAC9BrM,MAIN6K,EACEgC,QAAO,SAACpL,GAAD,OAAUA,EAAKpC,cAAgB6J,MACtCU,KAAI,SAACnI,GAAD,OACH,kBAACgL,EAAA,EAAD,CAAUJ,MAAO5K,EAAKzB,GAAIiK,IAAKxI,EAAKzB,IAClC,kBAACxB,EAAA,EAAD,CACEC,KAAM4H,EACN3H,WAAU,sBAAiB+C,EAAKzB,IAChCrB,SAAU8C,EAAKqL,OACflO,cAAe,CAAEwG,MAAO,CAAEuH,SAAU,WACpC9N,gBAAiB,CACfuG,MAAO,CAAEuH,SAAU,oBAQnC,kBAAChJ,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIC,GAAI,GACrB,kBAACiI,EAAA,EAAD,CAAa5G,MAAO,CAAE6G,MAAO,SAC3B,kBAACC,EAAA,EAAD,CAAYlM,GAAG,6BACZyE,EAAE,8CAEL,kBAAC0H,EAAA,EAAD,CACEC,QAAQ,4BACRC,MAAOjD,GACPkD,SAAU,SAACC,GAAD,OACRb,GAAiBa,EAAEC,OAAOH,SAG3BxF,EACEgG,QAAO,SAACxD,GAAD,OAAQA,EAAGmC,SAAWA,MAC7B5B,KAAI,SAACxB,GAAD,OACH,kBAACqE,EAAA,EAAD,CAAUJ,MAAOjE,EAAQpI,GAAIiK,IAAK7B,EAAQpI,IACxC,kBAACxB,EAAA,EAAD,CACEC,KAAM4H,EACN3H,WAAU,6BAAwB0J,EAAQQ,OAC1CjK,SAAQ,UAAKyJ,EAAQQ,OACrBhK,cAAe,CAAEwG,MAAO,CAAEuH,SAAU,WACpC9N,gBAAiB,CACfuG,MAAO,CAAEuH,SAAU,qBAUrC,MAEN,kBAAChJ,EAAA,EAAD,CAAMzE,WAAS,EAACyC,QAAS,GACvB,kBAACgC,EAAA,EAAD,CAAME,MAAI,GACR,kBAAC0B,EAAA,EAAD,CACErC,QAAQ,YACRjE,MAAM,UACN8N,UAAWC,IACXC,GAAE,UAAKnL,EAAL,YAAYmE,EAAZ,YACc,cAAdA,EAAA,UACO0B,EADP,YACiBqD,EADjB,YACuCE,IACrB,eAAdjF,EAAA,UACG6C,GADH,YACcuC,IACA,eAAdpF,EAAA,UACGiD,IACW,cAAdjD,EAAA,UACGiD,GADH,YACcsC,GADd,YACwBpC,IACxB,IAGL3E,EAAE,4CAKX,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOgG,KAAI,UAAKA,EAAL,yBACT,kBAAC,EAAD","file":"static/js/51.70a13486.chunk.js","sourcesContent":["import { Grid, Typography, TypographyProps } from \"@material-ui/core\";\nimport { StringMap, TOptions } from \"i18next\";\nimport React, { useEffect, useState } from \"react\";\nimport {\n  ContentTransModeType,\n  IGameChara,\n  IReleaseCondition,\n} from \"../../types\";\nimport { useCachedData } from \"../../utils\";\nimport { useAssetI18n } from \"../../utils/i18n\";\n\nexport const ContentTrans: React.FC<{\n  mode: ContentTransModeType;\n  contentKey: string;\n  original: string;\n  originalProps?: TypographyProps;\n  translatedProps?: TypographyProps;\n  assetTOptions?: string | TOptions<StringMap>;\n}> = ({\n  mode,\n  contentKey,\n  original,\n  originalProps,\n  translatedProps,\n  assetTOptions,\n}) => {\n  const { assetT } = useAssetI18n();\n  switch (mode) {\n    case \"original\":\n      return <Typography {...originalProps}>{original}</Typography>;\n    case \"translated\":\n      return (\n        <Typography {...translatedProps} color=\"textPrimary\">\n          {assetT(contentKey, original, assetTOptions)}\n        </Typography>\n      );\n    case \"both\":\n      return (\n        <Grid container direction=\"column\">\n          <Typography {...originalProps} color=\"textPrimary\">\n            {original}\n          </Typography>\n          <Typography {...translatedProps} color=\"textSecondary\">\n            {assetT(contentKey, original, assetTOptions)}\n          </Typography>\n        </Grid>\n      );\n  }\n};\n\nexport const CharaNameTrans: React.FC<{\n  mode: ContentTransModeType;\n  characterId: number;\n  originalProps?: TypographyProps;\n  translatedProps?: TypographyProps;\n  assetTOptions?: string | TOptions<StringMap>;\n}> = ({ mode, characterId, originalProps, translatedProps, assetTOptions }) => {\n  const [charas] = useCachedData<IGameChara>(\"gameCharacters\");\n  const { assetT, assetI18n } = useAssetI18n();\n\n  const [chara, setChara] = useState<IGameChara>();\n\n  useEffect(() => {\n    if (charas.length) {\n      setChara(charas.find((c) => c.id === characterId));\n    }\n  }, [charas, characterId]);\n\n  if (chara) {\n    switch (mode) {\n      case \"original\":\n        return (\n          <Typography {...originalProps} color=\"textPrimary\">\n            {chara.firstName} {chara.givenName}\n          </Typography>\n        );\n      case \"translated\":\n        return [\"zh-CN\", \"zh-TW\", \"ko\", \"ja\"].includes(assetI18n.language) ? (\n          <Typography {...translatedProps} color=\"textPrimary\">\n            {chara.firstName\n              ? assetT(\n                  `character_name:${characterId}.firstName`,\n                  chara.firstName,\n                  assetTOptions\n                )\n              : \"\"}{\" \"}\n            {assetT(\n              `character_name:${characterId}.givenName`,\n              chara.givenName,\n              assetTOptions\n            )}\n          </Typography>\n        ) : (\n          <Typography>\n            {assetT(\n              `character_name:${characterId}.givenName`,\n              chara.givenName,\n              assetTOptions\n            )}{\" \"}\n            {chara.firstName\n              ? assetT(\n                  `character_name:${characterId}.firstName`,\n                  chara.firstName,\n                  assetTOptions\n                )\n              : \"\"}\n          </Typography>\n        );\n      case \"both\":\n        return (\n          <Grid container direction=\"column\">\n            <Typography {...originalProps}>\n              {chara.firstName} {chara.givenName}\n            </Typography>\n            {[\"zh-CN\", \"zh-TW\", \"ko\", \"ja\"].includes(assetI18n.language) ? (\n              <Typography color=\"textSecondary\" {...translatedProps}>\n                {chara.firstName\n                  ? assetT(\n                      `character_name:${characterId}.firstName`,\n                      chara.firstName,\n                      assetTOptions\n                    )\n                  : \"\"}{\" \"}\n                {assetT(\n                  `character_name:${characterId}.givenName`,\n                  chara.givenName,\n                  assetTOptions\n                )}\n              </Typography>\n            ) : (\n              <Typography color=\"textSecondary\" {...translatedProps}>\n                {assetT(\n                  `character_name:${characterId}.givenName`,\n                  chara.givenName,\n                  assetTOptions\n                )}{\" \"}\n                {chara.firstName\n                  ? assetT(\n                      `character_name:${characterId}.firstName`,\n                      chara.firstName,\n                      assetTOptions\n                    )\n                  : \"\"}\n              </Typography>\n            )}\n          </Grid>\n        );\n    }\n  } else {\n    return <Typography></Typography>;\n  }\n};\n\nexport const ReleaseCondTrans: React.FC<{\n  mode: ContentTransModeType;\n  releaseCondId: number;\n  originalProps?: TypographyProps;\n  translatedProps?: TypographyProps;\n  assetTOptions?: string | TOptions<StringMap>;\n}> = ({\n  mode,\n  releaseCondId,\n  originalProps,\n  translatedProps,\n  assetTOptions,\n}) => {\n  const [releaseConds] = useCachedData<IReleaseCondition>(\"releaseConditions\");\n\n  const [releaseCond, setReleaseCond] = useState<IReleaseCondition>();\n\n  useEffect(() => {\n    if (releaseConds.length) {\n      setReleaseCond(releaseConds.find((rc) => rc.id === releaseCondId));\n    }\n  }, [releaseCondId, releaseConds]);\n\n  if (releaseCond) {\n    let i18nKey = \"\";\n    switch (releaseCond.releaseConditionType) {\n      case \"none\":\n        i18nKey = `release_cond:none_${releaseCond.id}`;\n        break;\n      case \"card_level\":\n        i18nKey = `release_cond:card_level`;\n        assetTOptions = Object.assign({}, assetTOptions, {\n          level: releaseCond.releaseConditionTypeLevel,\n        });\n        break;\n      case \"unit_rank\":\n        i18nKey = `release_cond:unit_rank_${releaseCond.releaseConditionTypeId}`;\n        assetTOptions = Object.assign({}, assetTOptions, {\n          rank: releaseCond.releaseConditionTypeLevel,\n        });\n        break;\n      case \"event_point\":\n        i18nKey = `release_cond:event_point`;\n        assetTOptions = Object.assign({}, assetTOptions, {\n          point: releaseCond.releaseConditionTypeQuantity,\n        });\n        break;\n      default:\n        i18nKey = `release_cond:${releaseCond.releaseConditionType}`;\n        break;\n    }\n    return (\n      <ContentTrans\n        mode={mode}\n        contentKey={i18nKey}\n        original={releaseCond.sentence}\n        originalProps={originalProps}\n        translatedProps={translatedProps}\n        assetTOptions={assetTOptions}\n      />\n    );\n  } else {\n    return <div></div>;\n  }\n};\n","import {\n  Avatar,\n  Button,\n  Card,\n  CardMedia,\n  Chip,\n  CircularProgress,\n  Fab,\n  Grid,\n  makeStyles,\n  Typography,\n} from \"@material-ui/core\";\nimport { PlayArrow, Stop } from \"@material-ui/icons\";\nimport React, { useCallback, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Howl } from \"howler\";\nimport { charaIcons } from \"../../utils/resources\";\nimport { useEffect } from \"react\";\n\nconst useStyle = makeStyles((theme) => ({\n  card: {\n    margin: theme.spacing(1.5, 0),\n    padding: theme.spacing(1.5, 0),\n  },\n}));\n\nconst AudioPlayButton: React.FC<{ url: string }> = ({ url }) => {\n  const [isPlay, setIsPlay] = useState(false);\n  const [audioSource, setAudioSource] = useState<Howl>();\n  const [isAudioLoading, setIsAudioLoading] = useState(false);\n\n  const PlayAudio = useCallback(() => {\n    if (!isPlay) {\n      if (audioSource) {\n        audioSource.play();\n        return;\n      }\n      setIsAudioLoading(true);\n      const audio = new Howl({\n        src: [url],\n      });\n      audio.on(\"load\", () => {\n        setIsAudioLoading(false);\n        audio.play();\n      });\n      audio.on(\"play\", () => {\n        setIsPlay(true);\n      });\n      audio.on(\"end\", () => {\n        setIsPlay(false);\n      });\n      setAudioSource(audio);\n    } else {\n      if (audioSource) {\n        audioSource.stop();\n      }\n      setIsPlay(false);\n    }\n  }, [url, audioSource, isPlay]);\n\n  useEffect(() => {\n    return () => {\n      if (audioSource) audioSource.stop();\n    };\n  }, [audioSource]);\n\n  return (\n    <Fab onClick={PlayAudio} size=\"small\">\n      {isPlay ? (\n        <Stop />\n      ) : isAudioLoading ? (\n        <CircularProgress variant=\"indeterminate\" size=\"1rem\" color=\"inherit\" />\n      ) : (\n        <PlayArrow />\n      )}\n    </Fab>\n  );\n};\n\nexport const Talk: React.FC<{\n  characterId: number;\n  characterName: string;\n  text: string;\n  voiceUrl: string;\n}> = ({ characterId, characterName, text, voiceUrl }) => {\n  const classes = useStyle();\n\n  return (\n    <Card className={classes.card}>\n      <Grid container alignItems=\"center\">\n        <Grid item xs={3} md={2}>\n          <Grid container justify=\"center\">\n            <Avatar\n              src={charaIcons[`CharaIcon${characterId}` as \"CharaIcon1\"]}\n            />\n          </Grid>\n        </Grid>\n        <Grid item xs={7} md={9}>\n          <Grid container spacing={1}>\n            <Grid item xs={12}>\n              <Chip label={characterName} />\n            </Grid>\n            <Grid item xs={12}>\n              <Typography>{text}</Typography>\n            </Grid>\n          </Grid>\n        </Grid>\n        {voiceUrl ? (\n          <Grid item xs={1}>\n            <AudioPlayButton url={voiceUrl} />\n          </Grid>\n        ) : null}\n      </Grid>\n    </Card>\n  );\n};\n\nexport const SpecialEffect: React.FC<{\n  seType: string;\n  text: string;\n  resource: string;\n}> = ({ seType, text, resource }) => {\n  const classes = useStyle();\n  const { t } = useTranslation();\n\n  const [isBGOpen, setIsBGOpen] = useState(false);\n  const [isMovieOpen, setIsMovieOpen] = useState(false);\n\n  switch (seType) {\n    case \"FullScreenText\":\n      return (\n        <Card className={classes.card}>\n          <Grid container alignItems=\"center\">\n            <Grid item xs={3} md={2}></Grid>\n            <Grid item xs={7} md={9}>\n              <Grid container spacing={1}>\n                <Grid item xs={12}>\n                  <Chip label={t(\"story_reader:snippet.FullScreenText\")} />\n                </Grid>\n                <Grid item xs={12}>\n                  <Typography>{text.trimStart()}</Typography>\n                </Grid>\n              </Grid>\n            </Grid>\n            {resource ? (\n              <Grid item xs={1}>\n                <AudioPlayButton url={resource} />\n              </Grid>\n            ) : null}\n          </Grid>\n        </Card>\n      );\n    case \"Telop\":\n      return (\n        <Card className={classes.card}>\n          <Grid container alignItems=\"center\">\n            <Grid item xs={3} md={2}></Grid>\n            <Grid item xs={8} md={9}>\n              <Grid container spacing={1}>\n                <Grid item xs={12}>\n                  <Chip label={t(\"story_reader:snippet.Telop\")} />\n                </Grid>\n                <Grid item xs={12}>\n                  <Typography>{text.trimStart()}</Typography>\n                </Grid>\n              </Grid>\n            </Grid>\n          </Grid>\n        </Card>\n      );\n    case \"ChangeBackground\":\n      return (\n        <Card className={classes.card}>\n          <Grid container alignItems=\"center\">\n            <Grid item xs={3} md={2}></Grid>\n            <Grid item xs={8} md={9}>\n              <Grid container spacing={1}>\n                <Grid item xs={12}>\n                  <Chip label={t(\"story_reader:snippet.ChangeBackground\")} />\n                </Grid>\n                {isBGOpen ? (\n                  <Grid item xs={12}>\n                    <CardMedia\n                      onClick={() => window.open(resource, \"_blank\")}\n                      image={resource}\n                      style={{ paddingTop: \"56.25%\", cursor: \"pointer\" }}\n                    />\n                  </Grid>\n                ) : (\n                  <Grid item xs={12}>\n                    <Button\n                      variant=\"contained\"\n                      onClick={() => setIsBGOpen(true)}\n                    >\n                      {t(\"story_reader:snippet.ShowBackground\")}\n                    </Button>\n                  </Grid>\n                )}\n              </Grid>\n            </Grid>\n          </Grid>\n        </Card>\n      );\n    case \"Movie\":\n      return (\n        <Card className={classes.card}>\n          <Grid container alignItems=\"center\">\n            <Grid item xs={3} md={2}></Grid>\n            <Grid item xs={8} md={9}>\n              <Grid container spacing={1}>\n                <Grid item xs={12}>\n                  <Chip label={t(\"story_reader:snippet.Movie\")} />\n                </Grid>\n                {isMovieOpen ? (\n                  <Grid item xs={12}>\n                    <video style={{ maxWidth: \"100%\" }} controls>\n                      <source src={resource}></source>\n                    </video>\n                  </Grid>\n                ) : (\n                  <Grid item xs={12}>\n                    <Button\n                      variant=\"contained\"\n                      onClick={() => setIsMovieOpen(true)}\n                    >\n                      {t(\"story_reader:snippet.ShowMovie\")}\n                    </Button>\n                  </Grid>\n                )}\n              </Grid>\n            </Grid>\n          </Grid>\n        </Card>\n      );\n    default:\n      return null;\n  }\n};\n\nexport const Sound: React.FC<{\n  hasBgm: boolean;\n  hasSe: boolean;\n  voiceUrl: string;\n}> = ({ hasBgm, hasSe, voiceUrl }) => {\n  const classes = useStyle();\n  const { t } = useTranslation();\n\n  return (\n    <Card className={classes.card}>\n      <Grid container alignItems=\"center\">\n        <Grid item xs={3} md={2}></Grid>\n        <Grid item xs={7} md={9}>\n          <Grid container spacing={1}>\n            <Grid item xs={12}>\n              <Chip\n                label={\n                  hasBgm\n                    ? t(\"story_reader:snippet.BGM\")\n                    : hasSe\n                    ? t(\"story_reader:snippet.SE\")\n                    : \"UNKNOWN\"\n                }\n              />\n            </Grid>\n            {voiceUrl.endsWith(\"bgm00000.mp3\") ? (\n              <Grid item xs={12}>\n                <Typography>{t(\"story_reader:snippet.NoSound\")}</Typography>\n              </Grid>\n            ) : null}\n          </Grid>\n        </Grid>\n        {voiceUrl && !voiceUrl.endsWith(\"bgm00000.mp3\") ? (\n          <Grid item xs={1}>\n            <AudioPlayButton url={voiceUrl} />\n          </Grid>\n        ) : null}\n      </Grid>\n    </Card>\n  );\n};\n","import {\n  CardMedia,\n  Container,\n  Grid,\n  makeStyles,\n  Paper,\n  Typography,\n} from \"@material-ui/core\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useParams } from \"react-router-dom\";\nimport { SettingContext } from \"../../context\";\nimport { useLayoutStyles } from \"../../styles/layout\";\nimport {\n  IUnitStory,\n  IEventStory,\n  SnippetAction,\n  ICharaProfile,\n  ICardEpisode,\n} from \"../../types.d\";\nimport {\n  getRemoteAssetURL,\n  useCachedData,\n  useProcessedScenarioData,\n} from \"../../utils\";\nimport { charaIcons } from \"../../utils/resources\";\nimport { ReleaseCondTrans } from \"../subs/ContentTrans\";\nimport { Sound, SpecialEffect, Talk } from \"./StoryReaderSnippet\";\n\nconst useStyle = makeStyles((theme) => ({\n  episodeBanner: {\n    padding: theme.spacing(1.5, 0),\n  },\n}));\n\nconst StoryReaderContent: React.FC<{}> = () => {\n  const { storyType, storyId } = useParams<{\n    storyType: string;\n    storyId: string;\n  }>();\n  const layoutClasses = useLayoutStyles();\n  const classes = useStyle();\n  const { t } = useTranslation();\n  const { contentTransMode } = useContext(SettingContext)!;\n  const getProcessedScenarioData = useProcessedScenarioData(contentTransMode);\n\n  const [unitStories] = useCachedData<IUnitStory>(\"unitStories\");\n  const [eventStories] = useCachedData<IEventStory>(\"eventStories\");\n  const [characterProfiles] = useCachedData<ICharaProfile>(\"characterProfiles\");\n  const [cardEpisodes] = useCachedData<ICardEpisode>(\"cardEpisodes\");\n\n  const [bannerUrl, setBannerUrl] = useState<string>(\"\");\n  const [chapterTitle, setChapterTitle] = useState<string>(\"\");\n  const [episodeTitle, setEpisodeTitle] = useState<string>(\"\");\n  const [scenarioData, setScenarioData] = useState<{\n    characters: {\n      id: number;\n      name: string;\n    }[];\n    actions: {\n      [key: string]: any;\n    }[];\n  }>({\n    characters: [],\n    actions: [],\n  });\n  const [releaseConditionId, setReleaseConditionId] = useState<number>(0);\n\n  useEffect(() => {\n    setScenarioData({\n      characters: [],\n      actions: [],\n    });\n    switch (storyType) {\n      case \"unitStory\":\n        if (unitStories.length) {\n          const [unitId, chapterNo, episodeId] = storyId.split(\"-\");\n\n          const chapter = unitStories\n            .find((us) => us.unit === unitId)!\n            .chapters.find((ch) => ch.chapterNo === Number(chapterNo))!;\n\n          const episode = chapter.episodes.find(\n            (ep) => ep.id === Number(episodeId)\n          )!;\n\n          getRemoteAssetURL(\n            `story/episode_image/${chapter.assetbundleName}_rip/${episode.assetbundleName}.webp`,\n            setBannerUrl\n          );\n          getProcessedScenarioData(\n            `scenario/unitstory/${chapter.assetbundleName}_rip/${episode.scenarioId}.asset`,\n            false\n          ).then((data) => setScenarioData(data));\n\n          setChapterTitle(chapter.title);\n          setEpisodeTitle(`${episode.episodeNoLabel} - ${episode.title}`);\n          setReleaseConditionId(episode.releaseConditionId);\n        }\n        break;\n      case \"eventStory\":\n        if (eventStories.length) {\n          const [eventId, episodeId] = storyId.split(\"-\");\n\n          const chapter = eventStories.find(\n            (es) => es.eventId === Number(eventId)\n          )!;\n\n          const episode = chapter.eventStoryEpisodes.find(\n            (ep) => ep.id === Number(episodeId)\n          )!;\n\n          getRemoteAssetURL(\n            `event_story/${chapter.assetbundleName}/episode_image_rip/${episode.assetbundleName}.webp`,\n            setBannerUrl\n          );\n          getProcessedScenarioData(\n            `event_story/${chapter.assetbundleName}/scenario_rip/${episode.scenarioId}.asset`,\n            false\n          ).then((data) => setScenarioData(data));\n\n          setChapterTitle(\"\");\n          setEpisodeTitle(`${episode.episodeNo} - ${episode.title}`);\n          setReleaseConditionId(episode.releaseConditionId);\n        }\n        break;\n      case \"charaStory\":\n        if (characterProfiles.length) {\n          const [charaId] = storyId.split(\"-\");\n\n          const episode = characterProfiles.find(\n            (cp) => cp.characterId === Number(charaId)\n          )!;\n\n          setBannerUrl(charaIcons[`CharaIcon${charaId}` as \"CharaIcon1\"]);\n          getProcessedScenarioData(\n            `scenario/profile_rip/${episode.scenarioId}.asset`,\n            false\n          ).then((data) => setScenarioData(data));\n\n          setChapterTitle(\"\");\n          setEpisodeTitle(t(\"member:introduction\"));\n          setReleaseConditionId(0);\n        }\n        break;\n      case \"cardStory\":\n        if (cardEpisodes.length) {\n          const [, , cardEpisodeId] = storyId.split(\"-\");\n\n          const episode = cardEpisodes.find(\n            (ce) => ce.id === Number(cardEpisodeId)\n          )!;\n\n          // setBannerUrl(charaIcons[`CharaIcon${charaId}` as \"CharaIcon1\"]);\n          getRemoteAssetURL(\n            `character/member_small/${episode.assetbundleName}_rip/card_normal.webp`,\n            setBannerUrl\n          );\n          getProcessedScenarioData(\n            `character/member/${episode.assetbundleName}_rip/${episode.scenarioId}.asset`,\n            true\n          ).then((data) => setScenarioData(data));\n\n          setChapterTitle(\"\");\n          setEpisodeTitle(episode.title);\n          setReleaseConditionId(episode.releaseConditionId);\n        }\n        break;\n    }\n  }, [\n    unitStories,\n    eventStories,\n    storyId,\n    storyType,\n    getProcessedScenarioData,\n    characterProfiles,\n    cardEpisodes,\n    t,\n  ]);\n\n  return (\n    <Container className={layoutClasses.content}>\n      <Paper className={classes.episodeBanner}>\n        <Grid container spacing={1}>\n          <Grid item xs={12} md={6}>\n            <CardMedia\n              image={bannerUrl}\n              style={{ paddingTop: \"56.25%\", backgroundSize: \"contain\" }}\n            />\n          </Grid>\n          <Grid item xs={12} md={6}>\n            <Grid\n              container\n              spacing={1}\n              alignItems=\"center\"\n              justify=\"center\"\n              style={{ height: \"100%\" }}\n            >\n              {chapterTitle ? (\n                <Grid item xs={12}>\n                  <Typography align=\"center\">{chapterTitle}</Typography>\n                </Grid>\n              ) : null}\n              <Grid item xs={12}>\n                <Typography align=\"center\">{episodeTitle}</Typography>\n              </Grid>\n              {releaseConditionId ? (\n                <Grid item xs={12}>\n                  <ReleaseCondTrans\n                    mode={contentTransMode}\n                    releaseCondId={releaseConditionId}\n                    originalProps={{ align: \"center\" }}\n                    translatedProps={{ align: \"center\" }}\n                  />\n                </Grid>\n              ) : null}\n            </Grid>\n          </Grid>\n        </Grid>\n      </Paper>\n      {scenarioData.actions.map((action, idx) => {\n        switch (action.type as SnippetAction) {\n          case SnippetAction.Talk:\n            return (\n              <Talk\n                key={`action-${idx}`}\n                characterId={action.chara.id as number}\n                characterName={action.chara.name as string}\n                text={action.body as string}\n                voiceUrl={action.voice as string}\n              />\n            );\n          case SnippetAction.SpecialEffect:\n            return (\n              <SpecialEffect\n                key={`action-${idx}`}\n                seType={action.seType}\n                text={action.body}\n                resource={action.resource}\n              />\n            );\n          case SnippetAction.Sound:\n            return (\n              <Sound\n                key={`action-${idx}`}\n                hasBgm={action.hasBgm}\n                hasSe={action.hasSe}\n                voiceUrl={action.hasBgm ? action.bgm : action.se}\n              />\n            );\n          default:\n            return null;\n        }\n      })}\n    </Container>\n  );\n};\n\nexport default StoryReaderContent;\n","import {\n  Button,\n  Container,\n  FormControl,\n  Grid,\n  InputLabel,\n  MenuItem,\n  Select,\n  Typography,\n} from \"@material-ui/core\";\nimport { Alert } from \"@material-ui/lab\";\nimport React, { Fragment, useContext, useEffect, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link, Route, Switch, useRouteMatch } from \"react-router-dom\";\nimport { SettingContext } from \"../../context\";\nimport { useLayoutStyles } from \"../../styles/layout\";\nimport {\n  ICardEpisode,\n  ICardInfo,\n  ICharaProfile,\n  IEventInfo,\n  IEventStory,\n  IUnitProfile,\n  IUnitStory,\n} from \"../../types\";\nimport { useCachedData } from \"../../utils\";\n// import { useAssetI18n } from \"../../utils/i18n\";\nimport { CharaNameTrans, ContentTrans } from \"../subs/ContentTrans\";\nimport StoryReaderContent from \"./StoryReaderContent\";\n\ntype storyType = \"eventStory\" | \"unitStory\" | \"charaStory\" | \"cardStory\";\n\nconst StoryReader: React.FC<{}> = () => {\n  // const classes = useStyle();\n  const layoutClasses = useLayoutStyles();\n  const { t } = useTranslation();\n  const { path, url } = useRouteMatch();\n  const match = useRouteMatch<{\n    storyType: storyType;\n    storyId: string;\n  }>(\"/storyreader/:storyType/:storyId\");\n  // const { getTranslated } = useAssetI18n();\n  const { contentTransMode } = useContext(SettingContext)!;\n  // const getCharaName = useCharaName(contentTransMode);\n\n  const [unitProfiles] = useCachedData<IUnitProfile>(\"unitProfiles\");\n  const [unitStories] = useCachedData<IUnitStory>(\"unitStories\");\n  const [eventStories] = useCachedData<IEventStory>(\"eventStories\");\n  const [events] = useCachedData<IEventInfo>(\"events\");\n  const [characterProfiles] = useCachedData<ICharaProfile>(\"characterProfiles\");\n  const [cardEpisodes] = useCachedData<ICardEpisode>(\"cardEpisodes\");\n  const [cards] = useCachedData<ICardInfo>(\"cards\");\n\n  const [storyType, setStoryType] = useState<storyType>(\"unitStory\");\n  const [unitId, setUnitId] = useState<string>(\"idol\");\n  const [unitStoryChapterId, setUnitStoryChapterId] = useState<number>(1);\n  const [unitStoryEpisodeId, setUnitStoryEpisodeId] = useState<number>(30000);\n  const [eventId, setEventId] = useState<number>(1);\n  const [eventStoryEpisodeId, setEventStoryEpisodeId] = useState<number>(\n    1000001\n  );\n  const [charaId, setCharaId] = useState<number>(1);\n  const [cardId, setCardId] = useState<number>(1);\n  const [cardEpisodeId, setCardEpisodeId] = useState<number>(1);\n\n  useEffect(() => {\n    if (match) {\n      setStoryType(match.params.storyType);\n      switch (match.params.storyType) {\n        case \"unitStory\":\n          {\n            const [unitId, chapterNo, episodeId] = match.params.storyId.split(\n              \"-\"\n            );\n            setUnitId(unitId);\n            setUnitStoryChapterId(Number(chapterNo));\n            setUnitStoryEpisodeId(Number(episodeId));\n          }\n          break;\n        case \"eventStory\":\n          {\n            const [eventId, episodeId] = match.params.storyId.split(\"-\");\n            setEventId(Number(eventId));\n            setEventStoryEpisodeId(Number(episodeId));\n          }\n          break;\n        case \"charaStory\":\n          {\n            const [charaId] = match.params.storyId.split(\"-\");\n            setCharaId(Number(charaId));\n          }\n          break;\n        case \"cardStory\":\n          {\n            const [charaId, cardId, cardEpisodeId] = match.params.storyId.split(\n              \"-\"\n            );\n            setCardEpisodeId(Number(cardEpisodeId));\n            setCardId(Number(cardId));\n            setCharaId(Number(charaId));\n          }\n          break;\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [match?.params.storyType, match?.params.storyId]);\n\n  return (\n    <Fragment>\n      <Typography variant=\"h6\" className={layoutClasses.header}>\n        {t(\"common:storyReader\")}\n      </Typography>\n      <Alert severity=\"warning\" className={layoutClasses.alert}>\n        {t(\"common:betaIndicator\")}\n      </Alert>\n      <Container className={layoutClasses.content} maxWidth=\"lg\">\n        <Grid container spacing={1}>\n          <Grid item xs={12} md={3}>\n            <FormControl style={{ width: \"100%\" }}>\n              <InputLabel id=\"select-story-type\">\n                {t(\"story_reader:selectLabel.storyType\")}\n              </InputLabel>\n              <Select\n                labelId=\"select-story-type\"\n                value={storyType}\n                onChange={(e) => setStoryType(e.target.value as storyType)}\n              >\n                <MenuItem value=\"eventStory\">\n                  <Typography>\n                    {t(\"story_reader:selectValue.eventStory\")}\n                  </Typography>\n                </MenuItem>\n                <MenuItem value=\"unitStory\">\n                  <Typography>\n                    {t(\"story_reader:selectValue.unitStory\")}\n                  </Typography>\n                </MenuItem>\n                <MenuItem value=\"charaStory\">\n                  <Typography>\n                    {t(\"story_reader:selectValue.charaStory\")}\n                  </Typography>\n                </MenuItem>\n                <MenuItem value=\"cardStory\">\n                  <Typography>\n                    {t(\"story_reader:selectValue.cardStory\")}\n                  </Typography>\n                </MenuItem>\n              </Select>\n            </FormControl>\n          </Grid>\n          {storyType === \"unitStory\" ? (\n            unitProfiles.length && unitStories.length ? (\n              <Fragment>\n                <Grid item xs={12} md={3}>\n                  <FormControl style={{ width: \"100%\" }}>\n                    <InputLabel id=\"select-unit-name\">\n                      {t(\"story_reader:selectLabel.unitName\")}\n                    </InputLabel>\n                    <Select\n                      labelId=\"select-unit-name\"\n                      value={unitId}\n                      onChange={(e) => {\n                        setUnitId(e.target.value as string);\n                        setUnitStoryChapterId(1);\n                        setUnitStoryEpisodeId(\n                          unitStories\n                            .find((us) => us.unit === e.target.value)!\n                            .chapters.find(\n                              (chapter) => chapter.chapterNo === 1\n                            )!.episodes[0].id\n                        );\n                      }}\n                    >\n                      {unitProfiles.map((unit) => (\n                        <MenuItem value={unit.unit} key={unit.unit}>\n                          <ContentTrans\n                            mode={contentTransMode}\n                            contentKey={`unit_profile:${unit.unit}.name`}\n                            original={unit.unitName}\n                          />\n                        </MenuItem>\n                      ))}\n                    </Select>\n                  </FormControl>\n                </Grid>\n                <Grid item xs={12} md={3}>\n                  <FormControl style={{ width: \"100%\" }}>\n                    <InputLabel id=\"select-unit-story-chapter\">\n                      {t(\"story_reader:selectLabel.unitStoryChapter\")}\n                    </InputLabel>\n                    <Select\n                      labelId=\"select-unit-story-chapter\"\n                      value={unitStoryChapterId}\n                      onChange={(e) =>\n                        setUnitStoryChapterId(e.target.value as number)\n                      }\n                    >\n                      {unitStories\n                        .find((us) => us.unit === unitId)!\n                        .chapters.map((chapter) => (\n                          <MenuItem\n                            value={chapter.chapterNo}\n                            key={chapter.chapterNo}\n                          >\n                            <ContentTrans\n                              mode={contentTransMode}\n                              contentKey={`unit_story_chapter_title:${chapter.unit}-${chapter.chapterNo}`}\n                              original={chapter.title}\n                              originalProps={{ style: { overflow: \"hidden\" } }}\n                              translatedProps={{\n                                style: { overflow: \"hidden\" },\n                              }}\n                            />\n                          </MenuItem>\n                        ))}\n                    </Select>\n                  </FormControl>\n                </Grid>\n                <Grid item xs={12} md={3}>\n                  <FormControl style={{ width: \"100%\" }}>\n                    <InputLabel id=\"select-unit-story-episode\">\n                      {t(\"story_reader:selectLabel.unitStoryEpisode\")}\n                    </InputLabel>\n                    <Select\n                      labelId=\"select-unit-story-episode\"\n                      value={unitStoryEpisodeId}\n                      onChange={(e) =>\n                        setUnitStoryEpisodeId(e.target.value as number)\n                      }\n                    >\n                      {unitStories\n                        .find((us) => us.unit === unitId)!\n                        .chapters.find(\n                          (chapter) => chapter.chapterNo === unitStoryChapterId\n                        )!\n                        .episodes.map((episode) => (\n                          <MenuItem value={episode.id} key={episode.id}>\n                            <ContentTrans\n                              mode={contentTransMode}\n                              contentKey={`unit_story_episode_title:${episode.id}`}\n                              original={`${episode.episodeNoLabel} - ${episode.title}`}\n                              originalProps={{ style: { overflow: \"hidden\" } }}\n                              translatedProps={{\n                                style: { overflow: \"hidden\" },\n                              }}\n                            />\n                          </MenuItem>\n                        ))}\n                    </Select>\n                  </FormControl>\n                </Grid>\n              </Fragment>\n            ) : null\n          ) : storyType === \"eventStory\" ? (\n            eventStories.length ? (\n              <Fragment>\n                <Grid item xs={12} md={3}>\n                  <FormControl style={{ width: \"100%\" }}>\n                    <InputLabel id=\"select-event-name\">\n                      {t(\"story_reader:selectLabel.eventName\")}\n                    </InputLabel>\n                    <Select\n                      labelId=\"select-event-name\"\n                      value={eventId}\n                      onChange={(e) => {\n                        setEventId(e.target.value as number);\n                        setEventStoryEpisodeId(\n                          eventStories.find(\n                            (es) => es.eventId === e.target.value\n                          )!.eventStoryEpisodes[0].id\n                        );\n                      }}\n                    >\n                      {events.map((ev) => (\n                        <MenuItem value={ev.id} key={ev.id}>\n                          <ContentTrans\n                            mode={contentTransMode}\n                            contentKey={`event_name:${ev.id}`}\n                            original={ev.name}\n                            originalProps={{ style: { overflow: \"hidden\" } }}\n                            translatedProps={{ style: { overflow: \"hidden\" } }}\n                          />\n                        </MenuItem>\n                      ))}\n                    </Select>\n                  </FormControl>\n                </Grid>\n                <Grid item xs={12} md={3}>\n                  <FormControl style={{ width: \"100%\" }}>\n                    <InputLabel id=\"select-event-story-episode\">\n                      {t(\"story_reader:selectLabel.eventStoryEpisode\")}\n                    </InputLabel>\n                    <Select\n                      labelId=\"select-event-story-episode\"\n                      value={eventStoryEpisodeId}\n                      onChange={(e) =>\n                        setEventStoryEpisodeId(e.target.value as number)\n                      }\n                    >\n                      {eventStories\n                        .find((es) => es.eventId === eventId)!\n                        .eventStoryEpisodes.map((episode) => (\n                          <MenuItem value={episode.id} key={episode.id}>\n                            <ContentTrans\n                              mode={contentTransMode}\n                              contentKey={`event_story_episode_title:${episode.id}`}\n                              original={`${episode.episodeNo} - ${episode.title}`}\n                              originalProps={{ style: { overflow: \"hidden\" } }}\n                              translatedProps={{\n                                style: { overflow: \"hidden\" },\n                              }}\n                            />\n                          </MenuItem>\n                        ))}\n                    </Select>\n                  </FormControl>\n                </Grid>\n              </Fragment>\n            ) : null\n          ) : storyType === \"charaStory\" ? (\n            characterProfiles.length ? (\n              <Fragment>\n                <Grid item xs={12} md={3}>\n                  <FormControl style={{ width: \"100%\" }}>\n                    <InputLabel id=\"select-chara-name\">\n                      {t(\"story_reader:selectLabel.charaName\")}\n                    </InputLabel>\n                    <Select\n                      labelId=\"select-chara-name\"\n                      value={charaId}\n                      onChange={(e) => {\n                        setCharaId(e.target.value as number);\n                      }}\n                    >\n                      {characterProfiles.map((cp) => (\n                        <MenuItem value={cp.characterId} key={cp.characterId}>\n                          <CharaNameTrans\n                            mode={contentTransMode}\n                            characterId={cp.characterId}\n                          />\n                        </MenuItem>\n                      ))}\n                    </Select>\n                  </FormControl>\n                </Grid>\n              </Fragment>\n            ) : null\n          ) : storyType === \"cardStory\" ? (\n            cards.length && cardEpisodes.length ? (\n              <Fragment>\n                <Grid item xs={12} md={3}>\n                  <FormControl style={{ width: \"100%\" }}>\n                    <InputLabel id=\"select-chara-name\">\n                      {t(\"story_reader:selectLabel.charaName\")}\n                    </InputLabel>\n                    <Select\n                      labelId=\"select-chara-name\"\n                      value={charaId}\n                      onChange={(e) => {\n                        setCharaId(e.target.value as number);\n                        const cardId = cards.find(\n                          (card) => card.characterId === e.target.value\n                        )!.id;\n                        setCardId(cardId);\n                        setCardEpisodeId(\n                          cardEpisodes.find((ce) => ce.cardId === cardId)!.id\n                        );\n                      }}\n                    >\n                      {characterProfiles.map((cp) => (\n                        <MenuItem value={cp.characterId} key={cp.characterId}>\n                          <CharaNameTrans\n                            mode={contentTransMode}\n                            characterId={cp.characterId}\n                          />\n                        </MenuItem>\n                      ))}\n                    </Select>\n                  </FormControl>\n                </Grid>\n                <Grid item xs={12} md={3}>\n                  <FormControl style={{ width: \"100%\" }}>\n                    <InputLabel id=\"select-card-name\">\n                      {t(\"story_reader:selectLabel.cardName\")}\n                    </InputLabel>\n                    <Select\n                      labelId=\"select-card-name\"\n                      value={cardId}\n                      onChange={(e) => {\n                        setCardId(e.target.value as number);\n                        setCardEpisodeId(\n                          cardEpisodes.find(\n                            (ce) => ce.cardId === e.target.value\n                          )!.id\n                        );\n                      }}\n                    >\n                      {cards\n                        .filter((card) => card.characterId === charaId)\n                        .map((card) => (\n                          <MenuItem value={card.id} key={card.id}>\n                            <ContentTrans\n                              mode={contentTransMode}\n                              contentKey={`card_prefix:${card.id}`}\n                              original={card.prefix}\n                              originalProps={{ style: { overflow: \"hidden\" } }}\n                              translatedProps={{\n                                style: { overflow: \"hidden\" },\n                              }}\n                            />\n                          </MenuItem>\n                        ))}\n                    </Select>\n                  </FormControl>\n                </Grid>\n                <Grid item xs={12} md={3}>\n                  <FormControl style={{ width: \"100%\" }}>\n                    <InputLabel id=\"select-card-story-episode\">\n                      {t(\"story_reader:selectLabel.cardStoryEpisode\")}\n                    </InputLabel>\n                    <Select\n                      labelId=\"select-card-story-episode\"\n                      value={cardEpisodeId}\n                      onChange={(e) =>\n                        setCardEpisodeId(e.target.value as number)\n                      }\n                    >\n                      {cardEpisodes\n                        .filter((ce) => ce.cardId === cardId)\n                        .map((episode) => (\n                          <MenuItem value={episode.id} key={episode.id}>\n                            <ContentTrans\n                              mode={contentTransMode}\n                              contentKey={`card_episode_title:${episode.title}`}\n                              original={`${episode.title}`}\n                              originalProps={{ style: { overflow: \"hidden\" } }}\n                              translatedProps={{\n                                style: { overflow: \"hidden\" },\n                              }}\n                            />\n                          </MenuItem>\n                        ))}\n                    </Select>\n                  </FormControl>\n                </Grid>\n              </Fragment>\n            ) : null\n          ) : null}\n        </Grid>\n        <Grid container spacing={1}>\n          <Grid item>\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              component={Link}\n              to={`${url}/${storyType}/${\n                storyType === \"unitStory\"\n                  ? `${unitId}-${unitStoryChapterId}-${unitStoryEpisodeId}`\n                  : storyType === \"eventStory\"\n                  ? `${eventId}-${eventStoryEpisodeId}`\n                  : storyType === \"charaStory\"\n                  ? `${charaId}`\n                  : storyType === \"cardStory\"\n                  ? `${charaId}-${cardId}-${cardEpisodeId}`\n                  : 0\n              }`}\n            >\n              {t(\"story_reader:buttonLabel.showEpisode\")}\n            </Button>\n          </Grid>\n        </Grid>\n      </Container>\n      <Switch>\n        <Route path={`${path}/:storyType/:storyId`}>\n          <StoryReaderContent />\n        </Route>\n      </Switch>\n    </Fragment>\n  );\n};\n\nexport default StoryReader;\n"],"sourceRoot":""}